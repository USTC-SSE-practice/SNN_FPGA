# 1 "neuron_core.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 395 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 108 "C:/Xilinx3/Vitis_HLS/2022.2/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "neuron_core.cpp" 2

# 1 "./neuron_core.h" 1




__attribute__((sdx_kernel("snn_infer", 0))) void snn_infer(const float input[784], float output[10]);
# 3 "neuron_core.cpp" 2
# 1 "./model_weights.h" 1



const float model_weights[10][784] = {
    {0.032009, 0.020242, 0.015718, -0.003763, 0.003761, -0.023382, 0.012128, 0.026209, -0.031504, -0.024433, 0.030473, -0.019026, -0.052954, -0.083175, -0.075448, -0.017838, 0.014209, -0.030459, -0.006903, -0.035100, -0.025303, 0.012481, -0.010710, -0.023634, -0.019253, 0.025726, 0.031809, 0.027619, 0.031476, -0.000055, 0.016043, 0.014882, -0.066302, -0.060843, -0.048563, -0.138199, -0.142859, -0.266107, -0.196930, 0.005686, 0.009046, -0.038135, -0.246611, -0.193266, -0.212180, -0.101698, -0.096126, -0.144793, -0.159963, -0.100215, -0.045673, -0.040338, -0.012693, -0.023826, -0.014953, -0.005426, 0.026093, -0.007458, -0.061574, -0.055602, -0.024937, -0.108607, -0.194710, -0.228265, -0.427450, -0.464821, -0.497198, -0.396783, -0.471642, -0.596194, -0.761925, -0.799790, -0.533122, -0.833227, -0.787983, -0.691615, -0.538990, -0.428002, -0.391120, -0.310894, -0.196926, -0.171041, -0.033074, 0.010651, -0.011187, 0.033737, -0.058289, -0.065532, -0.125174, -0.196950, -0.400146, -0.311561, -0.220304, -0.462151, -0.469162, -0.335858, -0.317412, -0.318712, -0.378398, -0.562765, -0.494135, -0.565025, -0.620595, -0.448737, -0.486924, -0.524774, -0.579101, -0.275863, -0.060051, -0.011400, -0.057592, -0.001646, -0.013555, -0.054618, -0.110962, -0.097356, -0.246053, -0.387669, -0.441222, -0.334460, -0.303973, -0.309987, -0.359379, -0.371167, -0.229974, -0.146231, -0.054657, -0.034256, -0.084115, -0.165455, -0.216594, -0.170350, -0.123776, -0.205613, -0.210771, -0.063900, -0.269063, -0.361379, -0.199030, -0.105616, -0.013115, -0.015172, -0.166849, -0.101837, -0.330214, -0.383869, -0.248107, -0.267845, -0.296748, -0.326470, -0.288953, -0.181926, -0.012792, 0.072359, 0.140102, 0.111909, 0.076388, 0.081367, 0.047803, -0.043125, -0.067970, -0.133263, -0.166832, -0.265895, -0.463777, -0.618972, -0.326566, -0.103596, 0.032031, -0.112948, -0.151907, -0.277543, -0.394524, -0.160990, -0.183096, -0.235296, -0.329942, -0.349244, -0.212363, -0.064612, -0.029532, 0.058366, 0.077423, 0.119789, 0.155940, 0.184309, 0.173221, 0.143541, 0.042296, 0.082813, -0.000868, -0.205793, -0.625159, -0.937041, -0.509018, -0.148019, -0.051118, -0.181865, -0.223968, -0.455066, -0.577077, -0.107986, -0.252078, -0.258963, -0.256400, -0.135456, -0.072262, 0.002330, 0.001208, 0.066585, 0.065999, 0.146916, 0.216574, 0.289851, 0.244334, 0.186467, 0.056764, 0.055059, 0.032972, -0.099179, -0.650374, -0.793913, -0.574196, -0.197636, 0.118523, -0.268188, -0.293200, -0.326380, -0.600732, -0.208969, -0.278429, -0.192529, -0.210009, -0.109029, -0.026592, -0.013013, 0.028975, -0.017620, 0.096956, 0.239695, 0.306199, 0.321320, 0.262494, 0.148418, 0.081419, 0.033450, 0.117303, 0.007395, -0.619576, -0.956244, -0.604525, -0.200724, -0.160658, -0.290589, -0.427857, -0.290496, -0.456725, -0.274102, -0.181675, -0.125518, -0.171646, -0.092883, 0.029711, -0.048196, 0.011045, 0.053961, 0.133899, 0.114516, 0.274065, 0.310332, 0.375688, 0.242581, 0.108579, 0.149892, 0.189388, 0.134418, -0.413983, -0.825502, -0.722340, -0.235970, -0.161553, -0.265187, -0.265793, -0.423842, -0.385689, -0.200680, -0.120000, -0.058758, -0.028123, 0.028928, -0.003746, -0.007579, 0.041144, 0.112767, 0.042244, -0.042191, 0.018369, 0.191348, 0.364169, 0.329236, 0.291295, 0.316000, 0.326713, 0.300447, -0.117407, -0.663806, -0.503876, -0.171883, -0.165756, -0.080555, -0.378375, -0.450030, -0.465744, -0.084414, -0.014669, -0.010892, 0.006896, -0.010294, 0.010595, 0.025344, 0.030796, -0.017722, -0.242311, -0.485720, -0.439377, -0.118204, 0.104427, 0.248203, 0.296974, 0.331858, 0.405189, 0.420916, 0.167534, -0.340037, -0.154019, -0.203477, -0.135850, -0.136200, -0.300527, -0.417108, -0.271400, 0.039184, 0.055978, 0.098536, 0.010731, 0.016343, 0.016949, 0.001946, 0.023337, -0.282174, -0.636893, -0.918234, -0.782413, -0.297691, -0.094617, 0.053462, 0.178668, 0.285656, 0.448160, 0.457675, 0.256703, -0.155553, -0.145146, -0.126770, -0.067861, 0.002366, -0.232381, -0.386090, -0.146797, 0.173151, 0.220773, 0.196147, 0.095565, 0.128936, 0.204777, 0.089721, -0.099149, -0.506135, -0.755316, -1.078855, -0.844459, -0.386933, -0.219891, -0.044844, 0.040252, 0.243171, 0.428018, 0.405458, 0.237023, -0.163017, -0.203785, -0.178786, -0.096852, -0.129818, -0.228910, -0.415551, -0.169074, 0.219325, 0.215887, 0.298356, 0.221621, 0.237112, 0.276792, 0.154468, -0.153790, -0.521441, -0.890248, -0.992127, -0.767383, -0.353464, -0.200827, -0.083906, 0.041677, 0.209292, 0.347574, 0.350423, 0.220528, -0.129474, -0.274679, -0.110825, -0.091753, -0.036835, -0.177823, -0.462282, -0.078275, 0.244561, 0.223473, 0.325458, 0.313817, 0.294469, 0.382867, 0.089974, -0.332622, -0.769647, -0.989154, -0.964092, -0.618595, -0.309190, -0.090936, -0.005594, 0.127993, 0.118030, 0.204014, 0.302272, 0.199135, -0.163544, -0.275896, -0.119422, -0.118194, -0.076249, -0.201231, -0.443114, -0.037661, 0.235410, 0.237524, 0.287006, 0.307684, 0.333099, 0.341226, 0.017270, -0.579431, -0.972533, -0.966718, -0.785888, -0.470192, -0.218863, 0.004504, 0.036793, 0.078445, 0.037644, 0.099876, 0.183406, 0.082435, -0.284023, -0.365793, -0.091725, 0.033261, -0.074634, -0.267513, -0.567220, -0.047238, 0.138227, 0.214292, 0.283535, 0.253891, 0.312795, 0.341056, -0.048456, -0.608431, -0.812072, -0.836109, -0.530324, -0.287472, 0.009689, 0.001970, -0.017517, -0.012530, -0.004129, 0.153740, 0.116827, 0.020577, -0.338764, -0.329480, 0.059329, -0.137275, -0.009677, -0.326613, -0.694055, -0.033836, 0.059366, 0.121453, 0.162975, 0.267199, 0.322457, 0.389639, 0.017340, -0.418868, -0.590070, -0.520674, -0.319872, -0.086824, -0.070633, -0.078760, -0.087897, -0.113225, -0.038374, 0.013143, 0.008111, -0.084770, -0.464241, -0.315031, -0.208402, -0.021279, 0.053923, -0.147631, -0.656868, -0.069672, 0.021669, 0.093383, 0.079395, 0.237432, 0.331123, 0.394009, 0.244025, -0.029468, -0.268278, -0.273845, -0.180995, -0.166600, -0.102263, -0.118694, -0.140617, -0.096423, -0.048368, -0.032898, -0.096408, -0.062487, -0.465098, -0.351073, -0.136657, 0.001506, 0.105647, -0.146723, -0.448845, -0.030584, 0.058206, 0.014873, 0.060697, 0.121309, 0.255444, 0.403983, 0.332722, 0.095844, -0.068059, -0.159339, -0.112302, -0.128438, -0.117592, -0.219805, -0.178011, -0.110589, 0.004102, -0.115852, -0.181094, -0.143736, -0.373774, -0.032415, -0.113419, -0.062949, -0.076513, -0.188954, -0.337506, -0.179303, 0.025236, 0.023316, -0.004707, 0.038942, 0.197885, 0.270978, 0.334505, 0.125573, 0.022482, -0.021803, -0.069845, -0.071518, -0.154469, -0.173438, -0.146527, -0.054323, -0.099476, -0.139313, -0.196149, -0.135615, -0.173934, 0.034612, 0.073817, -0.082722, -0.112475, -0.245295, -0.554156, -0.450918, -0.014601, 0.098373, 0.032312, 0.047784, 0.152191, 0.189849, 0.287748, 0.282507, 0.202014, 0.120187, 0.021225, -0.062159, -0.119787, -0.120651, -0.092807, -0.126115, -0.166524, -0.218893, -0.142890, 0.000785, -0.088275, 0.037857, 0.094810, -0.015805, -0.017762, -0.245515, -0.384663, -0.455455, -0.143222, 0.001618, 0.031206, 0.020922, 0.079590, 0.128687, 0.202516, 0.269807, 0.232498, 0.172295, 0.006029, -0.055580, -0.114612, -0.165009, -0.165733, -0.288577, -0.243060, -0.226939, -0.141185, -0.142297, -0.157426, -0.154190, 0.002228, -0.000955, 0.012831, -0.182651, -0.329046, -0.170293, -0.087986, -0.143969, -0.158082, -0.241332, -0.134340, -0.157348, -0.226990, -0.175362, -0.135795, -0.173027, -0.178395, -0.233225, -0.192338, -0.134754, -0.265192, -0.363750, -0.335879, -0.279186, -0.224724, -0.282976, -0.041816, -0.098281, -0.027059, -0.004646, 0.028599, -0.029989, -0.071734, -0.303725, -0.596802, -0.586037, -0.431336, -0.771834, -1.120992, -1.080216, -0.909899, -0.919576, -0.773680, -0.936271, -0.881311, -0.858260, -0.644663, -0.866023, -0.706773, -0.584006, -0.384996, -0.267572, -0.229755, -0.250869, -0.083030, -0.092640, 0.000688, -0.002451, 0.010694, 0.024150, -0.078747, -0.298668, -0.334232, -0.438522, -0.456850, -0.737397, -0.851374, -0.890447, -0.955805, -0.950866, -0.937203, -0.888933, -0.851932, -0.832431, -0.684531, -0.806428, -0.662773, -0.402556, -0.318239, -0.215347, -0.209070, -0.123818, -0.100397, 0.013202, 0.012178, -0.008819, -0.024208, 0.022982, -0.032125, -0.180094, -0.196861, -0.261393, -0.193074, -0.197488, -0.296718, -0.417498, -0.565132, -0.439416, -0.497124, -0.530166, -0.431699, -0.421400, -0.418302, -0.321017, -0.250019, -0.145627, -0.178251, -0.162806, -0.144651, 0.033607, 0.024359, 0.002803, -0.015176},
    {0.022723, 0.016500, 0.025146, 0.024088, -0.027696, 0.009638, -0.000593, -0.009226, 0.000807, -0.026200, 0.002097, -0.015949, -0.013771, -0.047645, -0.085813, -0.030405, -0.005203, 0.034383, -0.005820, -0.027791, -0.033167, -0.023057, -0.023373, -0.022746, 0.029300, -0.031662, 0.015221, -0.027700, -0.031207, 0.035651, -0.011754, 0.012004, -0.006667, -0.030684, -0.051368, -0.147405, -0.125695, -0.193621, -0.234232, -0.285270, -0.219848, -0.306246, 0.064675, 0.056443, -0.104794, -0.283113, -0.167960, -0.193607, -0.170788, -0.189180, -0.158734, -0.054812, 0.019735, -0.030288, -0.008952, 0.002910, 0.033356, 0.027517, 0.012953, -0.038938, -0.021607, -0.034400, -0.114169, -0.268201, -0.266334, -0.271444, -0.358222, -0.353006, -0.335592, -0.198310, 0.012446, 0.118518, 0.070733, -0.128641, -0.496614, -0.475292, -0.429754, -0.416583, -0.201351, -0.209394, -0.161407, -0.116467, -0.027812, 0.019834, -0.002761, 0.027775, 0.050740, 0.045872, -0.266705, -0.146676, -0.202185, -0.229614, -0.433614, -0.519539, -0.544539, -0.427308, -0.683112, -0.423994, -0.185577, -0.116226, -0.313128, -0.288300, -0.372492, -0.439021, -0.425171, -0.309052, -0.323423, -0.372138, -0.263506, -0.178819, -0.064971, -0.022413, -0.018221, -0.059365, 0.076193, -0.034879, -0.044669, -0.253164, -0.386086, -0.564890, -0.654072, -0.465778, -0.093006, 0.016745, 0.010067, 0.008892, 0.003734, 0.012579, -0.154461, -0.139747, -0.070213, -0.035839, 0.101587, 0.164525, 0.232335, 0.188780, -0.088801, -0.365983, -0.151100, -0.095119, -0.013901, -0.019376, 0.069559, 0.057009, 0.032698, -0.264768, -0.484160, -0.617880, -0.910689, -0.656331, -0.242362, 0.014288, 0.022588, -0.021483, -0.067119, -0.139370, -0.221693, -0.290465, -0.160781, 0.046596, 0.184091, 0.309229, 0.361205, 0.283672, 0.045087, -0.470552, -0.239267, -0.134541, -0.021996, -0.098798, -0.102557, 0.027513, 0.030944, -0.422878, -0.672796, -0.744696, -0.898620, -0.824733, -0.389043, -0.104175, 0.006777, -0.075889, -0.179674, -0.197276, -0.389705, -0.366522, -0.224271, -0.118140, 0.103258, 0.158134, 0.171060, 0.123521, -0.143266, -0.738506, -0.362880, -0.193130, -0.062734, -0.146031, -0.071997, -0.432519, -0.580058, -0.547003, -0.740581, -0.765737, -0.807449, -0.829380, -0.508167, -0.256745, -0.124677, -0.106124, -0.168529, -0.139882, -0.175903, -0.288253, -0.295820, -0.089782, -0.009766, 0.065245, 0.096712, -0.088582, -0.512943, -0.755067, -0.249832, -0.233341, -0.092607, -0.132639, -0.343328, -0.579385, -0.607210, -0.639360, -0.306679, -0.677890, -0.844715, -0.751989, -0.634935, -0.332450, -0.224525, -0.072147, 0.076670, 0.210212, 0.096081, -0.073031, -0.156380, -0.121801, -0.126763, -0.128973, -0.184262, -0.451098, -0.805214, -0.790910, -0.475007, -0.218061, -0.125673, 0.009899, -0.410214, -0.604336, -0.799396, -0.294232, -0.251526, -0.347766, -0.595482, -0.684250, -0.680760, -0.388187, -0.231865, 0.146900, 0.439405, 0.511515, 0.373170, 0.057328, -0.096032, -0.254334, -0.245810, -0.195013, -0.485701, -0.750329, -0.866182, -0.689057, -0.339458, -0.226222, -0.140387, 0.056122, -0.496043, -0.694994, -0.763397, -0.806353, -0.659031, -0.349248, -0.429217, -0.540253, -0.521597, -0.408947, -0.131110, 0.265981, 0.663280, 0.717033, 0.471141, 0.042284, -0.269727, -0.314997, -0.282137, -0.362147, -0.585466, -0.679141, -0.624174, -0.181993, -0.321924, -0.049419, -0.153567, 0.050337, -0.237850, -0.446711, -0.343823, -0.361255, -0.547217, -0.581762, -0.451662, -0.492877, -0.469584, -0.537064, -0.220089, 0.345391, 0.783522, 0.760029, 0.380710, -0.104837, -0.322755, -0.331364, -0.395172, -0.436870, -0.543560, -0.569705, -0.611124, -0.084639, -0.220346, 0.051595, -0.115361, -0.161042, -0.286648, -0.105834, -0.143795, -0.327744, -0.481595, -0.459613, -0.304286, -0.397393, -0.545924, -0.594878, -0.345086, 0.354563, 0.769802, 0.719227, 0.227011, -0.258041, -0.315685, -0.438419, -0.440534, -0.275809, -0.355188, -0.517190, -0.582739, -0.279389, -0.237413, 0.072246, 0.100900, -0.076043, -0.133770, -0.032867, -0.055015, -0.672950, -0.510016, -0.378267, -0.200301, -0.350017, -0.608673, -0.759397, -0.373212, 0.468933, 0.767337, 0.650733, 0.032665, -0.352711, -0.376729, -0.412524, -0.405777, -0.247013, -0.406217, -0.657232, -0.662283, -0.370889, -0.253591, -0.096819, -0.067428, -0.025627, 0.018108, 0.033280, -0.139254, -0.698782, -0.645082, -0.539192, -0.525102, -0.459216, -0.693205, -0.724554, -0.224885, 0.543577, 0.699437, 0.517936, -0.103573, -0.483451, -0.500379, -0.631523, -0.474691, -0.339109, -0.559146, -0.571002, -0.381711, -0.248849, -0.077530, -0.037947, -0.035656, -0.031727, 0.071482, 0.010530, -0.289479, -0.681205, -0.787127, -0.445680, -0.398090, -0.430545, -0.569405, -0.480439, 0.091322, 0.595259, 0.674676, 0.380542, -0.295874, -0.626112, -0.726390, -1.007080, -0.941146, -0.454913, -0.575179, -0.745191, -0.589669, -0.438145, -0.179882, -0.109088, -0.067398, 0.083775, 0.011856, -0.428443, -0.640637, -0.656249, -0.468953, -0.415140, -0.468201, -0.286458, -0.301366, -0.210902, 0.224514, 0.610726, 0.608924, 0.224016, -0.413691, -0.779620, -0.838224, -1.000985, -0.903585, -0.488089, -0.591822, -0.758552, -0.525865, -0.569371, -0.142674, -0.092215, 0.023702, 0.086555, -0.169747, -0.249536, -0.264368, -0.477471, -0.551759, -0.567639, -0.378932, -0.251527, -0.148824, -0.026345, 0.356597, 0.593307, 0.516942, 0.121321, -0.433963, -0.732243, -0.678417, -0.485037, -0.442801, -0.325601, -0.355642, -0.501800, -0.486079, -0.439737, -0.123095, -0.113936, -0.032474, 0.019538, -0.253532, -0.369309, -0.520627, -0.970788, -0.882410, -0.496601, -0.203204, -0.147166, -0.083504, 0.152484, 0.373735, 0.489949, 0.453662, 0.012324, -0.418055, -0.529862, -0.429253, -0.251574, -0.269291, -0.336893, -0.404564, -0.376978, -0.636725, -0.409466, -0.093827, 0.053619, 0.084468, 0.037690, -0.165931, -0.371225, -0.629684, -0.977719, -0.439354, -0.167753, -0.108700, -0.077998, -0.031695, 0.190844, 0.353874, 0.396347, 0.263339, 0.019983, -0.298033, -0.358971, -0.338568, -0.265221, -0.373983, -0.489164, -0.434142, -0.329309, -0.206152, -0.316124, -0.095596, 0.117563, -0.032695, -0.174733, -0.200867, -0.349844, -0.427914, -0.294573, -0.102864, -0.030128, -0.060523, -0.062123, 0.022644, 0.105249, 0.145794, 0.125117, 0.089635, 0.002496, -0.111203, -0.159146, -0.183989, -0.457115, -0.551998, -0.559687, -0.574805, -0.362523, -0.224068, -0.320288, -0.025544, 0.050163, 0.129862, -0.138807, -0.198205, -0.168016, -0.092880, 0.107309, 0.116989, 0.030922, 0.015601, -0.077876, -0.046744, -0.097570, -0.111833, -0.131996, -0.045605, 0.041381, 0.079054, 0.048814, -0.008161, -0.355383, -0.530028, -0.643538, -0.722270, -0.505695, -0.229046, -0.289378, -0.026491, -0.003572, 0.108838, 0.013835, -0.190291, -0.213760, 0.060340, 0.334810, 0.330957, 0.151994, -0.053166, -0.111563, -0.182699, -0.333197, -0.406064, -0.319945, -0.112201, 0.089423, 0.283508, 0.374339, 0.249340, -0.089076, -0.391503, -0.613333, -0.620174, -0.487692, -0.431860, -0.186385, 0.059618, -0.012530, -0.013196, 0.017812, -0.268109, -0.270084, 0.040332, 0.346325, 0.320221, 0.210198, 0.047709, -0.093142, -0.198234, -0.365229, -0.403813, -0.328618, -0.088575, 0.206407, 0.406653, 0.569987, 0.326334, -0.006934, -0.348872, -0.493381, -0.325324, -0.390656, -0.218015, 0.049493, 0.172583, -0.018795, -0.010367, 0.035410, -0.138114, -0.196412, -0.124709, 0.106193, 0.112475, -0.051667, -0.144545, -0.300176, -0.573987, -0.702860, -0.596257, -0.583771, -0.339276, -0.110098, -0.041897, 0.123274, 0.073946, -0.009602, -0.272514, -0.108766, -0.051091, -0.129945, -0.123727, 0.058802, 0.048418, 0.004781, 0.022519, 0.013911, -0.058577, -0.202311, -0.237828, -0.355478, -0.347127, -0.536337, -0.457366, -0.584310, -0.679107, -0.974217, -0.804288, -0.779723, -0.569106, -0.641331, -0.972524, -0.846795, -0.815468, -0.813671, -0.715468, -0.549642, -0.334748, -0.117458, -0.210981, -0.109593, -0.076748, 0.008474, -0.011161, 0.031556, 0.035477, -0.090111, -0.303457, -0.326867, -0.432316, -0.644149, -0.684837, -0.460902, -0.488137, -0.578766, -0.776656, -0.704897, -0.768976, -0.624148, -0.739702, -0.666886, -0.759241, -0.658380, -0.511121, -0.459176, -0.294227, -0.179382, -0.012147, -0.102615, -0.003715, 0.013806, 0.003962, 0.000456, -0.022770, 0.003667, -0.093255, -0.142557, -0.158383, -0.230383, -0.203899, -0.284073, -0.398236, -0.285144, -0.425482, -0.453581, -0.524405, -0.533529, -0.700445, -0.389397, -0.194782, -0.306670, -0.285147, -0.166643, -0.100547, -0.067848, -0.008947, -0.007432, -0.003763, -0.000798},
    {0.033954, 0.022223, -0.014255, 0.030555, 0.017605, 0.029860, -0.010810, 0.028303, 0.000786, 0.016418, 0.018377, 0.019030, -0.072604, 0.007399, 0.099560, 0.080057, 0.024610, 0.020930, -0.033198, -0.015479, 0.022965, 0.005196, -0.017633, -0.020399, 0.014575, -0.016719, -0.011771, 0.026105, -0.000053, -0.018048, -0.024472, -0.014731, -0.036363, -0.076760, -0.122324, -0.135430, -0.100009, -0.216340, -0.294859, -0.357687, -0.551656, -0.440601, -0.375773, -0.249703, -0.035759, -0.244001, -0.409388, -0.359833, -0.290516, -0.204463, -0.139536, -0.050598, 0.020352, -0.006409, -0.023982, 0.030530, 0.014654, 0.017246, -0.027682, -0.142096, -0.128042, -0.197028, -0.163392, -0.225336, -0.224905, -0.192776, -0.270969, -0.277384, -0.294106, -0.255635, -0.295420, -0.325088, -0.371727, -0.422841, -0.433620, -0.602694, -0.652297, -0.592693, -0.429617, -0.282959, -0.025114, 0.007884, -0.011838, 0.028042, -0.035092, -0.016922, -0.115346, -0.187371, -0.255115, -0.056726, 0.022602, 0.030295, 0.172020, 0.345290, 0.264404, 0.243537, 0.239905, 0.190757, 0.128232, 0.098395, 0.032022, -0.129895, -0.209524, -0.154348, -0.209318, -0.212896, -0.475151, -0.469827, -0.138059, -0.024375, -0.064192, -0.022336, -0.002008, -0.085906, -0.152410, -0.189866, -0.253271, -0.049940, 0.050630, 0.114149, 0.212155, 0.306056, 0.276252, 0.262478, 0.266479, 0.275117, 0.207728, 0.167148, 0.130318, 0.080951, -0.047401, -0.238315, -0.183602, -0.345748, -0.562664, -0.758339, -0.336281, -0.061218, -0.185182, -0.145397, -0.009599, 0.022344, -0.092974, -0.099522, -0.123871, -0.047165, 0.041994, 0.184755, 0.260547, 0.273304, 0.258628, 0.318285, 0.298018, 0.287831, 0.268827, 0.324804, 0.323191, 0.227577, 0.116996, -0.081997, -0.167443, -0.186516, -0.225917, -0.657701, -0.520973, -0.181732, -0.255125, -0.158869, 0.030202, -0.108068, -0.080912, -0.127006, -0.114521, 0.021645, 0.069037, 0.136546, 0.131792, 0.166631, 0.172759, 0.173119, 0.236292, 0.237354, 0.210328, 0.180554, 0.160984, 0.119160, 0.075636, 0.009253, -0.053121, -0.069410, -0.095979, -0.559817, -0.722933, -0.783607, -0.359751, -0.207305, -0.083931, -0.237999, 0.040860, 0.024986, -0.028613, 0.016626, 0.082430, 0.115138, 0.121360, 0.121109, 0.105749, 0.131173, 0.103477, 0.103477, 0.100584, 0.008462, -0.016154, -0.057578, -0.070775, -0.049919, -0.049548, 0.002468, 0.078673, -0.314811, -0.964913, -0.851979, -0.309551, -0.314413, -0.109640, 0.024225, -0.002931, -0.020248, 0.007531, 0.028048, 0.104552, 0.175182, 0.166914, 0.193105, 0.239617, 0.217650, 0.151122, 0.184736, 0.159347, 0.029601, -0.014676, -0.045468, -0.026936, 0.002821, -0.006535, 0.032504, 0.033030, -0.170846, -1.170079, -0.855612, -0.269450, -0.267006, -0.133509, -0.261959, -0.144943, -0.121548, -0.059657, 0.105288, 0.111160, 0.114027, 0.026580, 0.096935, 0.111788, 0.070815, -0.011428, 0.044607, 0.043762, 0.044121, 0.066887, 0.050860, 0.044517, 0.008073, -0.045981, 0.015790, -0.048762, -0.152441, -0.965622, -0.805462, -0.246621, -0.228385, -0.163833, -0.265941, -0.202961, -0.321929, -0.009198, 0.123211, 0.039139, -0.174197, -0.163577, -0.200027, -0.288913, -0.423303, -0.488335, -0.354248, -0.272356, -0.160027, -0.056707, 0.089108, 0.110491, 0.034238, 0.002238, -0.048910, -0.064226, -0.080518, -0.321840, -0.402701, -0.242425, -0.195907, -0.180272, -0.320873, -0.517522, -0.488999, -0.048602, -0.168174, -0.451309, -0.812946, -0.783179, -0.776606, -0.881088, -0.926043, -0.872214, -0.824681, -0.627168, -0.264856, -0.064307, -0.028011, 0.031393, 0.072558, -0.006661, -0.102681, -0.174243, -0.245143, -0.165710, 0.072708, -0.236895, -0.207916, -0.137463, -0.247367, -0.445862, -0.411746, -0.266462, -0.739955, -1.244434, -1.308237, -1.138985, -0.976886, -0.897968, -0.868057, -0.784175, -0.719659, -0.715125, -0.324683, -0.200160, -0.227955, -0.010624, 0.099918, -0.005638, -0.100078, -0.384598, -0.469862, -0.043905, 0.311421, 0.207174, -0.037765, -0.067766, -0.091690, -0.196216, -0.306318, -0.552221, -1.146452, -1.167330, -0.931246, -0.765051, -0.528050, -0.454794, -0.345040, -0.288780, -0.394790, -0.390386, -0.309090, -0.239727, -0.207718, -0.084743, -0.013389, -0.069940, -0.285472, -0.453388, -0.417875, -0.012123, 0.321703, 0.274149, 0.164097, -0.064481, -0.131182, -0.181645, -0.127953, -0.199859, -0.680348, -0.554483, -0.349678, -0.211602, -0.153335, -0.054491, 0.036725, 0.043531, -0.097236, -0.082986, -0.147078, -0.097442, -0.153820, -0.172727, -0.149317, -0.103821, -0.290368, -0.370380, -0.363536, -0.106941, 0.307145, 0.409236, 0.093334, -0.101064, -0.110411, -0.316889, 0.055221, 0.091823, -0.077575, -0.040501, -0.028650, -0.027610, -0.002866, 0.106101, 0.113305, 0.017732, 0.005094, 0.001485, -0.013597, 0.040170, -0.102203, -0.162618, -0.136709, -0.168689, -0.201524, -0.245089, -0.225177, 0.045975, 0.482010, 0.458385, 0.111155, -0.021939, -0.125438, -0.312699, 0.195440, 0.292125, 0.226720, 0.253040, 0.137811, 0.081139, 0.114528, 0.102907, 0.140037, 0.246289, 0.154551, 0.068005, 0.068183, 0.119977, 0.050346, -0.098952, -0.079533, -0.055221, 0.045380, -0.002180, 0.051857, 0.283322, 0.526474, 0.405132, 0.149342, 0.020897, -0.168007, -0.317707, 0.263754, 0.458350, 0.409840, 0.421004, 0.292250, 0.243171, 0.170713, 0.168789, 0.222048, 0.297283, 0.215640, 0.190732, 0.287977, 0.230312, 0.179619, 0.025764, -0.093489, -0.048294, 0.108875, 0.116050, 0.212857, 0.571392, 0.694642, 0.439265, 0.188255, -0.090012, -0.063719, -0.428432, 0.180218, 0.460796, 0.463619, 0.457625, 0.386065, 0.252400, 0.226863, 0.267545, 0.237534, 0.307895, 0.306100, 0.312480, 0.340124, 0.297381, 0.188798, 0.054448, -0.031030, -0.002831, 0.100548, 0.261817, 0.486207, 0.748134, 0.763644, 0.207602, 0.153123, -0.091614, -0.078537, -0.455610, -0.054138, 0.301745, 0.350104, 0.372989, 0.363313, 0.329204, 0.307916, 0.315930, 0.294829, 0.262176, 0.247757, 0.175860, 0.164787, 0.132473, 0.045623, -0.019269, -0.003436, 0.055536, 0.149543, 0.335438, 0.457760, 0.645721, 0.546773, 0.248381, 0.032615, -0.019892, -0.161331, -0.351881, 0.001007, 0.172567, 0.262438, 0.305235, 0.330256, 0.291514, 0.316565, 0.256184, 0.259979, 0.097935, -0.032553, -0.025091, -0.034163, -0.059867, -0.058783, 0.101778, 0.174786, 0.123283, 0.182302, 0.346638, 0.612707, 0.573606, 0.471569, 0.121571, -0.089093, -0.102512, -0.092810, -0.065371, 0.036710, 0.086304, 0.091894, 0.137429, 0.174931, 0.161296, 0.185839, 0.169205, 0.099507, -0.022971, -0.112105, -0.189987, -0.207226, -0.055540, 0.076937, 0.153592, 0.291864, 0.212635, 0.233768, 0.426680, 0.624598, 0.481736, 0.354099, 0.093995, -0.044836, -0.073016, -0.193897, -0.109089, 0.035103, 0.132762, -0.009620, 0.056854, 0.042159, 0.014161, -0.008030, -0.003793, 0.037582, -0.051049, -0.164726, -0.254881, -0.248295, -0.072011, 0.074482, 0.245205, 0.250861, 0.342174, 0.342012, 0.408420, 0.438793, 0.341112, 0.193113, -0.106646, -0.087468, -0.020123, -0.029381, -0.157982, -0.119965, -0.001047, -0.101604, -0.073127, -0.089026, -0.232691, -0.321880, -0.299951, -0.241364, -0.281180, -0.331517, -0.337251, -0.304347, -0.113749, -0.039083, 0.216070, 0.303173, 0.323760, 0.345545, 0.229370, 0.251785, 0.237448, 0.143118, -0.050120, 0.017755, 0.026819, 0.015698, -0.148366, -0.389160, -0.402301, -0.286530, -0.349001, -0.334012, -0.266080, -0.365932, -0.393435, -0.314024, -0.213305, -0.227040, -0.216298, -0.242073, -0.220350, -0.180257, -0.027660, -0.021693, 0.067012, 0.112726, 0.051253, 0.099945, 0.213459, 0.182331, 0.075585, -0.026786, -0.028935, -0.027821, -0.085591, -0.247620, -0.385458, -0.588702, -0.771116, -1.079040, -1.220879, -1.300447, -1.447022, -1.463098, -1.442627, -1.221751, -0.964740, -1.070237, -0.786326, -0.853711, -0.856698, -0.778465, -0.331293, -0.497465, -0.498435, -0.343301, -0.217805, 0.097747, 0.081087, 0.026055, -0.008262, -0.035526, 0.025039, -0.065893, -0.310281, -0.327099, -0.565884, -0.755753, -0.939860, -1.043104, -1.289317, -1.152252, -1.569695, -1.626101, -1.425162, -1.370811, -0.823470, -0.686893, -0.694608, -0.725608, -0.526108, -0.431222, -0.258671, -0.284426, -0.057074, -0.093411, -0.033158, -0.023261, 0.021057, 0.003606, -0.019838, -0.020167, -0.072743, -0.123708, -0.200237, -0.272107, -0.217243, -0.379738, -0.601376, -0.725250, -0.776380, -0.729416, -0.699875, -0.698878, -0.774666, -0.555600, -0.407402, -0.328131, -0.214188, -0.238641, -0.164364, -0.040222, 0.018640, -0.027661, 0.006063, -0.003787},
    {0.000011, -0.001550, -0.012599, -0.023870, 0.010008, 0.026603, 0.033269, -0.011767, -0.001849, -0.014332, 0.012469, -0.007678, -0.086475, -0.076413, -0.051666, -0.055508, -0.005020, -0.035674, 0.009673, -0.016667, 0.001647, 0.013517, 0.015155, -0.003208, -0.020835, 0.009215, -0.024950, -0.028319, -0.030373, -0.014207, 0.002753, -0.034648, -0.043014, -0.035894, -0.063486, -0.147676, -0.176234, -0.308383, -0.268961, -0.427160, -0.338286, -0.266253, -0.392696, -0.292747, -0.346918, -0.268396, -0.115877, -0.101974, -0.088507, -0.169359, -0.139271, -0.042006, 0.029280, -0.030414, 0.025311, 0.030025, -0.030228, -0.024770, -0.012253, -0.071760, -0.069248, -0.095602, -0.128633, -0.307823, -0.415415, -0.545304, -0.426504, -0.364994, -0.484100, -0.491190, -0.540145, -0.826307, -1.007571, -0.855366, -0.724530, -0.747658, -0.596774, -0.378807, -0.256082, -0.323283, -0.317418, -0.193078, -0.012583, -0.018502, 0.027449, -0.023174, -0.095059, -0.153663, -0.079300, 0.104090, -0.031967, -0.042821, -0.054957, -0.069998, -0.083669, -0.012359, 0.115747, 0.123164, 0.211459, 0.125380, 0.068599, 0.119201, 0.124529, -0.006926, -0.086858, -0.287969, -0.309526, -0.382234, -0.235059, -0.135268, -0.029682, -0.029095, -0.003507, 0.113720, -0.006355, 0.108716, 0.185336, 0.237526, 0.255472, 0.234416, 0.191815, 0.188196, 0.147009, 0.153740, 0.141187, 0.102252, 0.132362, 0.073126, -0.046134, -0.109780, -0.009583, -0.095768, -0.297996, -0.374071, -0.342090, -0.748688, -0.485546, -0.240373, -0.174174, -0.131860, -0.022239, -0.021545, -0.075268, 0.192346, 0.305202, 0.309872, 0.395460, 0.286941, 0.208340, 0.166571, 0.221760, 0.181818, 0.117774, 0.071555, -0.032765, 0.029055, 0.030115, -0.142118, -0.188588, -0.204939, -0.191742, -0.405527, -0.544296, -0.722193, -0.812710, -0.495580, -0.199283, -0.151814, 0.000250, 0.102304, -0.048975, 0.281411, 0.376166, 0.414200, 0.396892, 0.188480, 0.175872, 0.134079, 0.210670, 0.209414, 0.173496, 0.157410, 0.107203, 0.098079, 0.166388, 0.086125, 0.021711, -0.104748, -0.138577, -0.263496, -0.449040, -0.628945, -1.120415, -0.628721, -0.301017, -0.171193, -0.082812, 0.032936, -0.207470, 0.116494, 0.381042, 0.266992, 0.168511, 0.040309, 0.034264, 0.086749, 0.007522, 0.123742, 0.118108, 0.138812, 0.128648, 0.137794, 0.149545, 0.111662, 0.069836, 0.113878, 0.035040, -0.083339, -0.312507, -0.627726, -1.251505, -0.611790, -0.309818, -0.251587, -0.072824, -0.223419, -0.329768, -0.023966, 0.312694, 0.224765, 0.065633, -0.017405, -0.019020, -0.138080, -0.102724, -0.154916, -0.112202, -0.095880, -0.003750, 0.118934, 0.135927, 0.111601, 0.127300, 0.160702, 0.125031, 0.103819, -0.079030, -0.470774, -1.306188, -0.896516, -0.523302, -0.261960, -0.163292, -0.255263, -0.162857, 0.123234, 0.301246, 0.174903, 0.155958, 0.032131, -0.182842, -0.282754, -0.432560, -0.547477, -0.359741, -0.177791, 0.095585, 0.172622, 0.186534, 0.132876, 0.081785, 0.140996, 0.241025, 0.164593, -0.003111, -0.344970, -1.117793, -0.717461, -0.558445, -0.161197, -0.165361, -0.310140, -0.177767, 0.186069, 0.212545, 0.115417, 0.065234, -0.182991, -0.423740, -0.595100, -0.688794, -0.636188, -0.352626, 0.081531, 0.237084, 0.294743, 0.316568, 0.175723, 0.155049, 0.140603, 0.153463, 0.081309, -0.132545, -0.450311, -0.805363, -0.359809, -0.491355, -0.132754, -0.146029, -0.258961, -0.128698, 0.136237, 0.080246, -0.241446, -0.424267, -0.523039, -0.592381, -0.658400, -0.649994, -0.325703, -0.012406, 0.252814, 0.369356, 0.383618, 0.358295, 0.214599, 0.185143, 0.123017, -0.006563, -0.308543, -0.582425, -0.712685, -0.665928, -0.316518, -0.240824, -0.160872, -0.108367, -0.251268, -0.255376, 0.063331, -0.092359, -0.412669, -0.569780, -0.589580, -0.545874, -0.488819, -0.310900, -0.054982, 0.180536, 0.305663, 0.388690, 0.365536, 0.350220, 0.227354, 0.095580, -0.041861, -0.292742, -0.643965, -0.833969, -0.950190, -0.681202, -0.065368, -0.077441, -0.062439, -0.128519, -0.213555, -0.444196, -0.030378, -0.148289, -0.291108, -0.439723, -0.473845, -0.403203, -0.339024, -0.222437, 0.042661, 0.344899, 0.262454, 0.221288, 0.187109, 0.215767, 0.148833, 0.036369, -0.102046, -0.248396, -0.410240, -0.559940, -0.605431, -0.708356, -0.329517, -0.204286, -0.091795, -0.151390, 0.083996, 0.001159, 0.067092, -0.067068, -0.279083, -0.425885, -0.359523, -0.302953, -0.235808, -0.117879, 0.119905, 0.344359, 0.145917, 0.046085, 0.017581, 0.037731, -0.015513, -0.010941, 0.020896, 0.010285, -0.057491, -0.117787, -0.175821, -0.344310, -0.461611, -0.206669, -0.123931, -0.139447, 0.108615, 0.115524, 0.219264, 0.060162, -0.186758, -0.265169, -0.337916, -0.295074, -0.294744, -0.131191, 0.154842, 0.201870, 0.063215, -0.045619, -0.141931, -0.124175, -0.040919, 0.057824, 0.095726, 0.160472, 0.112674, 0.188657, 0.104575, -0.059931, -0.479671, -0.227343, -0.141051, -0.069105, 0.129572, 0.252097, 0.394339, 0.166804, -0.064057, -0.249210, -0.333415, -0.450032, -0.413222, -0.326201, -0.188431, -0.031944, -0.132973, -0.254260, -0.299215, -0.121766, 0.017167, 0.176142, 0.233634, 0.188357, 0.271541, 0.356383, 0.262801, 0.049150, -0.713800, -0.352242, -0.149337, 0.016179, 0.110796, 0.276319, 0.471052, 0.296655, 0.021514, -0.142335, -0.240071, -0.488952, -0.791444, -0.860597, -0.772425, -0.642959, -0.602993, -0.548626, -0.331370, -0.034962, 0.129098, 0.190756, 0.234030, 0.190468, 0.305126, 0.432881, 0.274956, -0.234733, -0.831463, -0.459141, -0.165076, -0.134360, 0.006224, 0.302644, 0.568773, 0.485626, 0.227143, 0.056535, -0.076580, -0.248186, -0.681754, -0.865426, -0.860364, -0.998403, -0.941356, -0.616222, -0.236691, 0.124713, 0.234287, 0.246695, 0.164854, 0.143840, 0.310823, 0.387706, 0.083425, -0.712045, -0.756949, -0.407497, -0.232652, -0.070541, 0.020617, 0.246157, 0.550602, 0.469615, 0.328698, 0.191184, 0.029922, -0.082414, -0.271997, -0.345057, -0.432403, -0.408106, -0.451864, -0.394211, -0.107454, 0.138871, 0.232980, 0.284897, 0.135752, 0.106323, 0.207942, 0.111796, -0.191126, -0.822924, -0.732708, -0.375673, -0.185766, -0.020251, 0.152046, 0.339078, 0.539017, 0.522715, 0.353682, 0.198989, 0.051279, 0.049441, -0.021361, -0.078822, -0.078607, -0.130910, -0.133449, -0.141021, -0.046292, 0.081906, 0.139552, 0.216883, 0.076492, 0.118174, 0.126254, -0.129425, -0.363103, -0.771888, -0.611768, -0.314518, -0.084069, -0.082236, 0.101567, 0.290666, 0.486970, 0.496065, 0.434571, 0.306456, 0.126780, 0.077525, -0.004392, 0.012290, 0.003577, -0.082665, -0.060285, -0.031714, 0.035578, 0.088885, 0.085911, 0.098053, 0.113144, 0.085183, -0.154814, -0.280261, -0.475910, -0.817918, -0.446895, -0.176692, -0.033025, -0.077267, 0.102277, 0.238412, 0.339182, 0.450263, 0.338236, 0.377616, 0.222974, 0.130138, 0.098210, 0.070805, 0.067896, 0.049193, 0.016737, 0.020517, -0.004796, -0.013732, 0.042368, 0.044592, 0.099784, 0.068660, -0.159242, -0.226990, -0.460114, -0.559155, -0.376864, -0.067775, -0.048108, -0.013428, 0.011996, 0.084794, 0.221382, 0.460078, 0.501642, 0.477884, 0.485897, 0.234377, 0.208193, 0.152554, 0.149554, 0.059442, 0.073157, -0.063286, -0.032066, -0.063534, 0.037053, 0.105380, 0.055492, -0.104521, -0.189471, -0.355425, -0.522692, -0.173452, -0.180466, 0.036557, 0.002460, 0.027241, -0.019609, 0.064056, 0.171280, 0.423580, 0.508861, 0.565263, 0.576783, 0.449150, 0.300584, 0.317627, 0.205895, 0.165179, 0.047561, 0.096278, 0.027313, 0.000411, -0.056251, -0.073898, -0.216358, -0.382453, -0.200298, -0.218740, -0.480917, -0.260920, -0.137884, -0.112336, -0.009768, 0.032691, 0.031918, -0.005065, -0.078467, 0.058633, 0.132977, 0.115911, 0.194608, 0.175765, 0.148702, 0.219761, 0.178071, 0.196102, 0.113696, 0.057428, -0.096073, -0.175656, -0.401459, -0.471635, -0.486733, -0.346918, -0.209994, -0.019453, -0.210308, -0.283890, -0.105377, -0.103020, -0.006040, -0.032919, -0.033642, -0.034192, -0.114752, -0.125857, -0.177761, -0.284155, -0.168861, -0.382564, -0.588056, -0.792981, -0.902133, -0.933015, -0.659893, -0.981285, -1.078774, -0.858232, -0.986105, -0.720082, -0.272007, -0.117697, -0.091336, -0.012391, -0.322008, -0.095693, -0.110622, -0.004105, 0.028319, 0.009904, 0.026979, -0.020403, -0.027363, -0.121703, -0.209817, -0.310110, -0.343791, -0.299193, -0.457414, -0.778890, -0.873060, -0.889798, -0.839896, -0.733891, -0.824667, -0.804618, -0.614549, -0.522740, -0.381247, -0.349626, -0.192828, -0.205745, -0.068241, -0.008333, -0.029953, -0.003945, -0.031931},
    {-0.004646, -0.024992, -0.006715, -0.033092, 0.034885, -0.013699, -0.004621, 0.023755, -0.015251, 0.029639, -0.012760, -0.009977, -0.068740, -0.133451, -0.072789, -0.079282, -0.008302, 0.006967, 0.016586, -0.003817, -0.024398, 0.019850, 0.008118, 0.027502, 0.012027, -0.033803, -0.011762, -0.019602, -0.032629, -0.034047, -0.026513, 0.007358, -0.071749, -0.128422, -0.198169, -0.269822, -0.229845, -0.331676, -0.407307, -0.526178, -0.582468, -0.599387, -0.388684, -0.327089, -0.460129, -0.467563, -0.431599, -0.340061, -0.408140, -0.190016, -0.152968, -0.049993, 0.034806, 0.009186, 0.002244, -0.026884, -0.032740, -0.007858, -0.101666, -0.090494, -0.043562, -0.156726, -0.302340, -0.498700, -0.566177, -0.731989, -0.858336, -0.951565, -1.042258, -1.099352, -1.023187, -1.052991, -1.019796, -0.665627, -1.019785, -0.808661, -0.724106, -0.384635, -0.308042, -0.332253, -0.232408, -0.111941, -0.031151, -0.005679, -0.024303, 0.003158, -0.077350, -0.161797, -0.149987, -0.215271, -0.375615, -0.637113, -0.706290, -0.781563, -0.837344, -0.760126, -0.963519, -1.161910, -1.103803, -1.043825, -0.769595, -0.640971, -0.509491, -0.410219, -0.398047, -0.231705, -0.157494, -0.199907, -0.246269, -0.190659, -0.074444, -0.016756, -0.022722, -0.056091, -0.175809, -0.130064, 0.014325, 0.008185, -0.327952, -0.408412, -0.461136, -0.417787, -0.546362, -0.578077, -0.655234, -0.553843, -0.603313, -0.497504, -0.323275, -0.301514, -0.314756, -0.075477, 0.070037, 0.090425, 0.206949, 0.182499, 0.144435, -0.067606, -0.093804, -0.098387, -0.022342, -0.015778, -0.152162, -0.072750, 0.103159, 0.121076, 0.087888, -0.050405, -0.189087, -0.137762, -0.197194, -0.225622, -0.236135, -0.265280, -0.056073, 0.042320, 0.086649, 0.132698, 0.121182, 0.193313, 0.234677, 0.265667, 0.314030, 0.383421, 0.222073, -0.004519, -0.229640, -0.181350, 0.027605, -0.080306, -0.236655, -0.163020, 0.191565, 0.168132, 0.101153, 0.012970, -0.051243, -0.051631, -0.117634, -0.185893, -0.316968, -0.433608, -0.452127, -0.463624, -0.444258, -0.301007, -0.229649, -0.001682, 0.034927, 0.189849, 0.422194, 0.467583, 0.174802, -0.012561, 0.025015, -0.213796, -0.063291, -0.190168, -0.366925, -0.087979, 0.092027, 0.143743, 0.038560, 0.024432, -0.053402, -0.114803, -0.131194, -0.246618, -0.459900, -0.583957, -0.737136, -0.826486, -0.654792, -0.459924, -0.303222, -0.128090, -0.081201, 0.125333, 0.289747, 0.302924, 0.001722, -0.039076, -0.050430, -0.300621, -0.050926, -0.196358, -0.190099, -0.168613, -0.067334, 0.061980, 0.011007, -0.014568, -0.076876, -0.139768, -0.237138, -0.309621, -0.426927, -0.482183, -0.714592, -0.768143, -0.583021, -0.388560, -0.172021, -0.127843, -0.025583, -0.007865, 0.128641, 0.114775, -0.029046, -0.136706, -0.069023, -0.219492, -0.136750, -0.242402, -0.201030, -0.342153, -0.232776, -0.061621, -0.100755, -0.055728, -0.096820, -0.096500, -0.178521, -0.259717, -0.195761, -0.284052, -0.665933, -0.573859, -0.247139, -0.136221, -0.063341, -0.051526, -0.034158, 0.005457, 0.099710, 0.010894, -0.340253, -0.332742, -0.230681, -0.266949, -0.124701, -0.147850, -0.287701, -0.399099, -0.125303, -0.072516, -0.166836, -0.128511, -0.019554, 0.021545, -0.032894, -0.021758, 0.105188, -0.211467, -0.655005, -0.225524, 0.041905, 0.030432, 0.005177, -0.040132, -0.089397, -0.045338, 0.028425, -0.177286, -0.261745, -0.408268, -0.465520, -0.144768, -0.197428, -0.259127, -0.339053, -0.373564, -0.147738, -0.104994, -0.103779, -0.063697, 0.099882, 0.135192, 0.276433, 0.303276, 0.306829, -0.235534, -0.543503, 0.059597, 0.303176, 0.177865, 0.031081, -0.061012, -0.179875, -0.110096, -0.105331, -0.231069, -0.541240, -0.365012, -0.227612, -0.106986, -0.088384, -0.193126, -0.323280, -0.202748, -0.194400, -0.099374, 0.023959, 0.144605, 0.219599, 0.305467, 0.491797, 0.668212, 0.524040, -0.032704, -0.253152, 0.136695, 0.344759, 0.188333, 0.082846, -0.034252, -0.129857, -0.000166, -0.159817, -0.441143, -0.323291, -0.192080, -0.081207, -0.120983, -0.089980, -0.118333, -0.288684, -0.163135, -0.038881, 0.060606, 0.147405, 0.220606, 0.339255, 0.413321, 0.592478, 0.772969, 0.490391, 0.014578, -0.091420, 0.155292, 0.330974, 0.306527, 0.101854, 0.052881, 0.127347, 0.099176, 0.023102, -0.099980, -0.167889, 0.009754, -0.100970, -0.044905, -0.100013, -0.072108, -0.173981, -0.084656, 0.107541, 0.224216, 0.351756, 0.360776, 0.343597, 0.359539, 0.479728, 0.570649, 0.366095, 0.024633, -0.058822, 0.243829, 0.429158, 0.402283, 0.266997, 0.254634, 0.206720, 0.060348, 0.046061, 0.051315, -0.021580, 0.028733, -0.261828, -0.044472, -0.096561, -0.001232, -0.001321, 0.124037, 0.186054, 0.252611, 0.337674, 0.366257, 0.339514, 0.334609, 0.316962, 0.321921, 0.193917, 0.035067, 0.130822, 0.393238, 0.493105, 0.405084, 0.248458, 0.235033, 0.080925, -0.011097, 0.076464, -0.005934, -0.211030, -0.106080, -0.220160, -0.176914, -0.105270, -0.139494, -0.084473, 0.069431, -0.009233, 0.199201, 0.305335, 0.326239, 0.320927, 0.216688, 0.047173, 0.125964, 0.129413, 0.135924, 0.424948, 0.486130, 0.488256, 0.367096, 0.325258, 0.230255, 0.152640, 0.147685, 0.037062, -0.147006, -0.257173, -0.401369, -0.291847, -0.158371, 0.031033, -0.077718, 0.054427, -0.076728, -0.077375, 0.065543, 0.174065, 0.311396, 0.345408, 0.158277, 0.007897, 0.003743, 0.134945, 0.397397, 0.524171, 0.537839, 0.327469, 0.227540, 0.132387, 0.012783, 0.019792, -0.017479, -0.201422, -0.125893, -0.175566, -0.429736, -0.245763, -0.187242, -0.106621, -0.033085, -0.000204, -0.144576, -0.165945, -0.113099, -0.011022, 0.094116, 0.058227, -0.008413, -0.104397, -0.107136, 0.198692, 0.328376, 0.363064, 0.285630, 0.140742, -0.053526, -0.169925, -0.201590, -0.171310, -0.204668, -0.374102, -0.272102, -0.229821, -0.294720, -0.228170, -0.158013, -0.070228, -0.158990, -0.053611, -0.151598, -0.257134, -0.201080, -0.364609, -0.456804, -0.492693, -0.584267, -0.666939, -0.423288, -0.193806, 0.009844, 0.096191, -0.017482, -0.064052, -0.225117, -0.322646, -0.337701, -0.322009, -0.356578, -0.516511, -0.557877, -0.508561, -0.357632, -0.393223, -0.158718, 0.008832, -0.099500, -0.089751, -0.289081, -0.397326, -0.420650, -0.572452, -0.747503, -0.816492, -0.728170, -0.709734, -0.448242, -0.383011, -0.312848, -0.217530, -0.164334, -0.196928, -0.137582, -0.284852, -0.341324, -0.254390, -0.246663, -0.392975, -0.457923, -0.504455, -0.402875, -0.400766, -0.138223, -0.084997, -0.207360, -0.350278, -0.448278, -0.527712, -0.451743, -0.692035, -0.767074, -0.572247, -0.512569, -0.387543, -0.305491, -0.291897, -0.314720, -0.299702, -0.179743, -0.149459, -0.075922, -0.107083, -0.103564, -0.081579, -0.029876, -0.124105, -0.202855, -0.291383, -0.207323, -0.202919, -0.053039, -0.087843, -0.150276, -0.295718, -0.311846, -0.632542, -0.589224, -0.586387, -0.507074, -0.421568, -0.292616, -0.219159, -0.266666, -0.272289, -0.270299, -0.231694, -0.114566, -0.009116, 0.024453, 0.131100, 0.096435, 0.082968, 0.130072, 0.039620, -0.098365, -0.167133, 0.061977, 0.010956, -0.025747, -0.009229, -0.010175, -0.339934, -0.373958, -0.734813, -0.409439, -0.239434, -0.159806, -0.153235, -0.156315, -0.202351, -0.209422, -0.225065, -0.258864, -0.128180, -0.114144, -0.020335, 0.045737, 0.118668, 0.164852, 0.184245, 0.187877, -0.056455, -0.099277, -0.105676, 0.072623, 0.002835, -0.011800, -0.000679, 0.003150, -0.095901, -0.233070, -0.642640, -0.105526, 0.007009, -0.141330, -0.117947, -0.149527, -0.096146, -0.123106, -0.289867, -0.286210, -0.215498, -0.205339, -0.201091, -0.212312, -0.104175, -0.009167, -0.015185, 0.013563, -0.051553, -0.131202, -0.163519, 0.122186, -0.109593, 0.007649, 0.026716, -0.004358, -0.050185, -0.148336, -0.367866, -0.363134, -0.297451, -0.454343, -0.475737, -0.581841, -0.461804, -0.585027, -0.630400, -0.545036, -0.560425, -0.509614, -0.725063, -0.834368, -0.725118, -0.860899, -0.660250, -0.484178, -0.180616, 0.001875, -0.089821, -0.114674, -0.084894, -0.016652, -0.009137, 0.020758, -0.017751, -0.109612, -0.266520, -0.375819, -0.530859, -0.773459, -0.853713, -0.969502, -0.840877, -1.057418, -0.916407, -1.013669, -0.976893, -0.637473, -1.043364, -1.076138, -0.907524, -0.599465, -0.709050, -0.652449, -0.434816, -0.187886, -0.067720, -0.106843, 0.004552, 0.023648, 0.030154, -0.033212, -0.030701, -0.016971, -0.084332, -0.121326, -0.251777, -0.256913, -0.337671, -0.379998, -0.399267, -0.403652, -0.444425, -0.483224, -0.507264, -0.437424, -0.313976, -0.279263, -0.356944, -0.300015, -0.208023, -0.123694, -0.196345, -0.137055, -0.021278, -0.027450, -0.009559, 0.033584},
    {-0.015446, 0.012346, 0.029451, -0.001669, 0.030282, -0.006716, -0.009410, -0.034211, 0.012862, 0.029907, -0.007982, -0.013039, -0.044556, -0.111024, -0.060112, -0.017735, -0.026598, 0.016191, 0.014770, 0.016024, -0.011508, 0.011007, -0.017039, -0.005606, 0.010023, 0.027568, -0.020593, -0.010900, 0.003148, -0.022503, -0.009749, -0.020947, -0.024098, -0.105115, -0.134417, -0.205217, -0.182786, -0.295563, -0.215451, -0.373444, -0.335011, -0.394586, -0.538526, -0.495043, -0.495601, -0.465194, -0.343311, -0.374688, -0.278857, -0.265515, -0.170355, -0.109730, -0.027366, -0.017846, -0.007202, 0.002450, 0.020612, 0.021773, -0.050211, -0.110387, -0.143050, -0.118721, -0.261741, -0.401351, -0.319666, -0.467918, -0.630883, -0.725115, -0.758284, -0.968550, -1.136130, -0.843123, -0.446349, -0.579069, -0.334321, -0.200342, -0.368764, -0.335467, -0.218228, -0.506527, -0.325354, -0.206546, -0.002983, 0.026295, 0.014546, 0.005682, -0.039439, -0.198795, -0.219273, -0.134613, -0.245257, -0.363402, -0.377940, -0.591847, -0.441672, -0.464021, -0.142148, -0.289029, -0.234298, -0.312865, -0.392003, -0.403408, -0.379610, -0.334358, -0.314454, -0.183827, 0.004453, -0.024254, -0.009923, 0.013980, 0.002670, 0.001542, 0.033684, -0.110330, -0.160939, -0.174103, -0.288748, -0.466710, -0.302260, -0.356757, -0.512676, -0.354280, -0.300811, -0.188010, -0.189531, -0.247872, -0.127008, 0.031437, 0.063760, 0.090378, -0.007927, -0.025665, 0.019238, 0.233533, 0.355167, 0.445586, 0.378787, 0.199932, 0.004234, -0.157822, -0.023937, -0.029577, -0.188501, -0.352756, -0.537751, -0.482918, -0.460637, -0.304998, -0.180554, -0.140092, -0.061946, -0.056177, -0.099789, -0.132190, -0.121543, -0.065544, 0.004159, 0.043120, 0.079111, 0.099944, 0.289409, 0.242254, 0.438140, 0.481072, 0.429743, 0.280810, 0.165511, 0.036946, -0.019411, -0.130194, -0.115186, -0.419599, -0.510219, -0.499566, -0.330533, -0.223798, -0.120274, -0.048205, -0.006499, 0.034577, -0.021906, 0.016034, -0.032677, -0.096274, -0.126248, -0.068635, 0.048346, 0.089285, 0.145804, 0.131671, 0.348416, 0.538146, 0.686751, 0.580620, 0.417003, 0.090843, -0.022717, -0.225508, -0.184315, -0.571474, -0.746155, -0.489828, -0.344240, -0.171368, -0.023858, 0.060811, 0.158375, 0.136202, 0.058990, -0.023764, -0.110069, -0.181473, -0.073100, -0.045704, 0.041065, 0.078652, 0.179446, 0.234374, 0.336539, 0.586675, 0.876573, 0.803212, 0.417587, 0.157850, -0.073902, -0.296299, -0.405075, -0.658875, -0.833454, -0.420236, -0.283678, -0.100633, 0.092075, 0.147619, 0.131133, 0.208462, 0.142913, -0.050995, -0.211562, -0.260746, -0.212031, -0.155353, 0.010436, 0.033999, 0.188511, 0.317951, 0.455365, 0.806453, 1.056713, 1.029651, 0.561301, 0.118278, -0.180333, -0.351324, -0.604379, -0.694013, -0.494879, -0.286994, -0.089334, 0.044562, 0.205586, 0.266827, 0.213579, 0.360969, 0.251223, 0.065369, -0.088032, -0.285917, -0.335326, -0.272268, -0.239082, -0.142773, 0.048242, 0.308950, 0.553068, 0.903833, 1.224017, 1.170911, 0.640753, 0.202469, -0.132875, -0.395248, -0.735901, -0.758495, -0.289124, -0.138806, 0.097030, 0.236058, 0.251697, 0.383510, 0.382251, 0.522097, 0.471307, 0.385571, 0.086815, -0.150867, -0.340112, -0.489617, -0.530462, -0.585416, -0.560323, -0.398529, -0.228062, 0.197444, 0.676538, 0.943710, 0.491088, 0.110852, -0.187584, -0.292058, -0.446787, -0.634370, -0.166734, 0.084398, 0.267359, 0.289080, 0.312332, 0.302709, 0.338623, 0.510955, 0.510466, 0.410647, 0.068463, -0.224412, -0.337724, -0.506269, -0.639631, -1.049521, -1.581616, -1.835370, -1.771335, -1.373366, -0.737733, 0.436663, 0.333840, 0.057376, -0.123391, -0.178667, -0.316889, -0.279295, -0.120534, 0.256499, 0.307948, 0.285152, 0.201861, 0.192635, 0.296507, 0.438798, 0.475628, 0.294384, 0.018690, -0.246897, -0.402466, -0.352454, -0.274772, -0.343067, -0.608415, -1.245797, -1.812711, -1.767346, -1.418128, -0.465585, -0.010844, -0.180926, -0.083626, -0.215131, -0.405097, -0.081158, -0.089384, 0.281537, 0.130932, 0.128733, 0.065944, 0.116862, 0.274694, 0.409357, 0.324440, 0.221263, -0.007831, -0.247065, -0.361858, -0.303659, -0.140992, 0.073800, -0.013021, -0.343476, -0.921536, -1.371412, -1.251484, -0.491276, -0.337862, -0.212856, 0.132263, -0.167917, -0.287906, -0.319559, -0.061250, 0.010549, -0.164462, -0.093264, 0.012082, 0.178363, 0.317360, 0.240126, 0.238686, 0.042686, -0.089986, -0.203795, -0.210642, -0.302319, -0.101724, -0.002480, 0.124213, -0.075717, -0.332249, -0.618070, -0.763143, -0.396626, -0.306320, -0.114363, 0.096315, -0.086515, -0.341384, -0.104658, -0.211709, -0.378066, -0.416351, -0.309981, -0.110532, 0.148799, 0.175772, 0.148210, 0.109680, -0.078466, -0.214650, -0.317198, -0.272197, -0.220318, -0.057289, -0.091029, 0.006500, -0.098069, -0.118331, -0.195867, -0.220614, -0.339577, -0.334391, -0.138471, -0.125141, -0.127339, -0.336210, 0.039386, -0.058750, -0.495085, -0.559410, -0.507853, -0.395649, -0.186010, -0.078864, -0.026659, -0.085216, -0.204758, -0.272537, -0.258470, -0.183902, -0.112067, -0.012591, -0.063381, -0.023691, -0.116042, -0.012620, 0.088550, 0.104544, -0.436652, -0.525817, -0.133813, -0.020420, -0.010018, -0.329200, 0.071355, 0.107740, -0.079793, -0.012043, -0.302505, -0.502193, -0.517534, -0.507606, -0.450001, -0.459916, -0.399443, -0.301800, -0.134441, 0.031171, 0.061975, 0.085976, 0.024046, -0.021802, -0.000357, 0.067944, 0.201843, 0.189615, -0.692573, -0.471474, -0.225243, -0.069528, -0.084933, -0.226578, -0.018707, 0.162798, 0.067524, 0.294103, 0.046072, -0.185570, -0.454679, -0.584058, -0.594328, -0.443921, -0.180861, -0.045512, -0.017840, 0.072100, 0.094216, 0.049111, 0.020467, 0.029873, 0.064642, 0.123248, 0.231117, 0.257931, -0.632556, -0.311790, -0.150056, -0.078851, -0.116510, -0.111994, -0.252489, 0.041215, 0.129601, 0.387287, 0.290541, 0.173054, 0.016691, -0.113023, -0.016931, 0.083584, 0.106558, 0.056642, 0.042377, 0.037990, 0.065003, -0.026969, -0.019870, 0.033811, 0.074065, 0.219577, 0.307908, 0.165847, -0.553604, -0.384224, -0.167001, 0.030439, -0.096708, -0.192478, -0.250218, -0.059558, 0.019337, 0.208120, 0.213644, 0.280151, 0.250234, 0.259756, 0.280038, 0.195558, 0.026593, -0.094514, -0.108666, -0.009389, 0.032178, 0.016826, 0.042569, 0.028824, 0.173481, 0.357913, 0.379229, 0.115412, -0.411519, -0.192468, 0.084656, -0.061778, -0.123469, -0.348627, -0.135828, -0.083799, -0.120779, -0.062235, 0.071454, 0.171489, 0.182900, 0.188917, 0.161589, 0.069120, -0.014203, -0.126282, -0.064426, 0.000142, 0.028966, 0.062830, 0.074673, 0.181879, 0.392829, 0.459373, 0.366873, -0.021381, -0.250366, -0.154279, -0.084154, -0.050605, -0.150031, -0.468897, -0.293505, 0.051747, -0.022670, -0.161429, -0.105973, -0.010977, 0.149583, 0.179129, 0.148654, 0.146330, 0.113521, 0.054744, 0.051127, 0.023659, 0.057232, 0.132037, 0.211611, 0.276012, 0.294193, 0.404030, 0.281885, -0.020828, -0.101382, -0.015470, -0.088013, 0.032680, 0.022886, -0.190445, -0.252391, 0.033537, 0.042684, -0.046050, -0.084412, -0.036589, 0.049138, 0.083312, 0.142935, 0.158758, 0.112608, 0.146005, 0.112588, 0.073906, -0.014367, -0.016147, 0.099795, 0.181929, 0.196244, 0.168543, 0.139624, 0.031664, -0.050664, -0.041459, 0.022886, -0.017663, 0.011252, -0.178022, -0.137947, -0.078244, -0.004511, -0.035128, 0.014444, -0.080465, 0.051631, -0.000072, 0.058436, 0.137488, 0.138046, 0.140304, 0.072908, -0.051604, 0.016067, 0.000930, 0.055746, 0.023728, -0.058856, 0.073248, 0.136116, 0.131681, -0.215513, -0.161147, -0.006348, -0.033482, -0.019954, -0.099086, 0.071262, 0.024270, -0.250890, -0.145643, -0.040597, -0.109359, 0.016327, 0.014371, 0.051578, 0.100616, 0.148258, 0.063236, 0.049052, 0.045345, 0.016637, -0.136954, -0.240690, -0.265642, -0.120370, 0.093180, 0.176230, 0.158368, -0.142116, -0.064031, 0.020176, -0.026411, -0.010122, -0.002254, -0.033101, -0.177801, -0.445422, -0.607755, -0.724988, -0.682767, -0.483591, -0.573068, -0.378535, -0.310367, -0.298584, -0.575453, -0.269073, -0.163573, -0.153723, -0.240762, -0.285566, -0.346026, -0.219454, -0.178923, -0.136364, -0.123033, -0.049529, -0.019970, 0.028568, -0.034232, 0.002662, -0.012356, -0.022028, -0.130645, -0.206962, -0.295215, -0.344738, -0.377344, -0.529802, -0.177599, -0.191910, -0.221879, -0.347555, -0.883704, -0.964288, -0.953133, -0.769127, -0.520856, -0.359100, -0.330568, -0.170014, -0.111221, -0.146621, -0.019666, 0.019232, -0.025638, -0.017024},
    {0.027320, 0.032733, 0.002930, 0.017944, 0.031302, -0.028720, 0.005550, 0.021726, 0.032527, 0.011619, -0.030546, -0.032896, 0.021356, 0.053994, -0.083425, -0.069426, 0.032340, -0.020543, -0.020761, 0.031392, 0.030853, -0.010570, -0.011686, 0.030521, 0.025371, -0.013677, 0.033430, -0.014955, 0.034557, 0.008869, 0.026115, 0.025125, 0.065323, 0.105638, 0.035911, 0.094705, 0.165230, 0.164161, 0.123992, 0.190195, 0.217224, 0.148195, 0.087169, -0.019271, -0.073507, 0.031068, 0.132553, 0.183772, 0.136962, 0.126986, 0.141035, 0.030552, -0.023563, 0.035138, 0.000674, -0.020133, -0.017089, 0.016268, 0.024401, 0.002381, 0.102775, 0.113150, 0.043806, 0.112942, 0.160853, 0.310634, 0.317899, 0.300791, 0.427929, 0.493708, 0.432766, 0.374756, 0.455917, 0.484323, 0.511924, 0.632284, 0.484924, 0.403482, 0.284233, 0.245783, 0.160509, 0.131888, -0.030789, 0.033138, 0.021146, 0.010039, -0.036803, 0.118946, 0.121283, 0.047975, 0.073343, 0.170270, 0.213311, 0.210078, 0.111370, 0.148143, 0.170208, 0.117948, 0.155886, 0.239734, 0.353326, 0.424247, 0.506701, 0.542784, 0.581641, 0.538261, 0.512690, 0.420572, 0.391307, 0.196995, 0.091339, 0.012404, 0.017618, -0.094241, -0.096936, -0.137460, -0.118312, 0.017901, -0.012250, 0.119388, 0.037837, 0.026793, -0.042906, -0.114154, -0.226817, -0.204963, -0.101003, 0.005702, 0.120029, 0.264612, 0.391555, 0.464136, 0.473076, 0.501493, 0.549803, 0.427957, 0.289719, 0.110920, -0.168379, 0.049380, 0.027534, 0.027285, 0.074791, -0.277101, -0.347019, -0.208250, -0.164107, -0.111692, -0.042185, -0.119099, -0.181688, -0.253825, -0.324753, -0.263687, -0.228549, -0.229414, -0.102772, 0.042778, 0.155750, 0.275554, 0.385903, 0.261979, 0.238450, 0.183213, 0.088584, -0.079504, -0.220938, 0.047984, 0.031945, -0.058641, 0.014844, -0.262673, -0.458329, -0.250778, -0.157196, -0.095853, -0.091504, -0.195245, -0.169974, -0.259414, -0.233490, -0.296161, -0.347412, -0.286683, -0.256652, -0.231816, -0.202264, -0.048821, -0.027258, -0.049712, -0.082255, -0.206465, -0.324832, -0.323432, -0.413559, -0.210483, -0.072276, -0.117651, -0.283468, -0.384923, -0.553520, -0.252416, -0.157564, -0.003022, -0.040603, -0.139482, -0.181108, -0.189652, -0.257603, -0.340420, -0.287373, -0.342772, -0.427309, -0.415718, -0.505298, -0.554895, -0.556306, -0.663180, -0.551272, -0.651874, -0.571553, -0.787542, -0.306114, -0.229776, -0.098115, -0.121881, -0.478192, -0.456445, -0.644042, -0.221450, -0.158966, -0.052621, -0.028077, -0.092507, -0.116762, -0.156189, -0.196047, -0.218364, -0.249992, -0.392629, -0.476134, -0.626889, -0.851011, -0.907547, -0.878150, -0.782867, -0.874801, -1.109484, -0.939643, -0.689075, -0.423287, -0.215413, -0.129142, -0.221894, -0.535950, -0.432859, -0.556298, -0.126712, -0.009491, 0.002239, 0.022698, -0.090718, -0.130728, -0.065100, -0.079573, -0.148636, -0.168631, -0.376691, -0.521545, -0.724399, -0.825839, -0.669378, -0.467960, -0.399488, -0.480699, -0.536375, -0.650082, -0.640677, -0.620423, -0.159328, -0.126180, -0.270709, -0.548668, -0.522841, -0.525611, -0.056618, 0.014403, 0.085950, 0.065266, -0.076562, -0.005424, -0.010063, 0.037706, 0.067786, -0.074861, -0.442966, -0.602532, -0.617039, -0.545246, -0.454324, -0.266791, -0.193266, -0.103984, -0.097128, -0.229278, -0.338593, -0.504403, -0.135894, -0.125549, -0.282609, -0.484725, -0.415843, -0.377721, -0.014540, 0.048689, 0.073542, 0.050696, 0.021658, 0.047240, 0.105948, 0.184229, 0.252225, -0.067849, -0.396423, -0.339197, -0.340113, -0.304273, -0.262065, -0.082512, 0.140487, 0.173243, 0.216006, 0.188657, -0.009642, -0.450846, -0.025421, -0.084915, -0.191619, -0.344265, -0.366138, -0.407762, 0.021157, 0.154636, 0.104379, 0.090018, 0.131027, 0.112641, 0.297009, 0.340818, 0.215673, -0.168848, -0.218866, -0.064051, -0.059236, -0.122723, -0.054991, 0.032727, 0.265618, 0.314769, 0.383598, 0.362316, 0.153553, -0.352160, -0.066693, -0.100430, -0.159082, -0.231780, -0.292127, -0.408526, -0.027505, 0.152576, 0.053128, 0.098218, 0.181451, 0.272439, 0.369752, 0.306725, 0.020479, -0.116160, 0.020833, 0.066574, -0.016302, -0.108623, -0.023168, 0.056554, 0.287965, 0.364169, 0.538067, 0.434617, 0.159318, -0.251461, -0.165570, -0.055988, -0.077893, -0.185405, -0.593532, -0.683606, -0.050313, 0.101131, 0.083739, 0.144225, 0.285735, 0.317621, 0.377653, 0.223939, -0.074269, 0.011265, 0.118218, 0.187585, -0.028357, -0.110175, -0.045497, 0.114034, 0.246801, 0.309200, 0.449125, 0.335299, 0.105328, -0.330670, -0.147559, -0.084301, -0.017262, -0.193340, -0.369510, -0.826231, -0.130754, 0.031269, 0.085639, 0.114105, 0.258473, 0.295592, 0.280974, 0.087491, -0.082975, 0.071012, 0.107440, -0.004806, -0.094971, -0.111513, -0.006924, 0.140070, 0.216633, 0.242051, 0.196902, 0.145971, 0.001027, -0.356237, -0.214554, -0.059621, -0.098685, -0.124265, -0.391871, -0.722195, -0.243812, -0.112905, -0.002403, 0.088297, 0.257783, 0.310480, 0.272714, -0.033803, -0.110731, 0.025693, 0.008817, -0.186120, -0.216875, -0.050295, 0.079897, 0.157866, 0.119760, 0.052441, 0.108362, -0.009789, -0.205225, -0.595175, -0.177759, 0.025725, -0.063753, -0.197484, -0.448757, -0.652155, -0.269531, -0.149225, 0.000357, 0.185243, 0.276590, 0.433438, 0.370628, 0.106477, -0.027253, 0.026844, -0.122570, -0.203275, -0.099781, 0.144046, 0.138833, 0.097622, 0.049328, 0.026915, -0.022881, -0.261554, -0.310990, -0.644633, -0.309883, -0.070244, -0.040073, -0.299636, -0.514448, -0.532462, -0.449391, -0.271018, -0.060718, 0.233417, 0.338764, 0.486721, 0.534592, 0.409635, 0.121509, 0.050889, 0.017787, 0.097887, 0.181109, 0.242357, 0.168716, 0.068614, 0.064877, -0.000829, -0.132914, -0.409057, -0.307921, -0.226575, -0.262963, -0.064443, -0.120641, -0.386495, -0.465378, -0.394392, -0.470644, -0.384260, -0.130325, 0.083897, 0.307033, 0.502551, 0.558539, 0.452242, 0.236327, 0.142219, 0.206828, 0.267663, 0.214785, 0.184688, 0.115305, 0.088194, -0.021951, -0.077761, -0.282034, -0.570185, -0.608716, -0.399550, -0.163860, 0.028299, -0.080414, -0.338362, -0.533251, -0.396668, -0.385116, -0.516496, -0.343851, -0.111729, 0.159412, 0.355434, 0.485405, 0.473546, 0.380986, 0.348445, 0.363391, 0.286539, 0.208266, 0.130584, 0.057613, 0.037089, -0.101893, -0.370169, -0.525138, -0.577962, -0.544559, -0.250717, -0.056722, -0.062659, -0.073671, -0.368109, -0.629807, -0.731427, -0.558280, -0.484177, -0.393268, -0.276201, -0.089620, 0.126949, 0.304693, 0.423873, 0.434517, 0.422841, 0.318484, 0.258582, 0.213380, 0.059765, 0.003093, -0.186325, -0.390219, -0.530324, -0.582818, -0.408433, -0.324423, -0.143077, -0.064930, -0.044333, -0.128109, -0.283192, -0.467082, -0.704897, -0.899387, -0.797718, -0.635430, -0.463999, -0.396690, -0.320328, -0.221257, -0.132199, -0.068954, -0.085870, -0.036920, -0.019624, -0.106793, -0.110885, -0.153460, -0.316908, -0.488597, -0.523827, -0.525872, -0.479323, -0.270399, -0.023000, -0.043540, 0.003950, 0.002717, -0.186962, -0.378758, -0.495362, -0.624335, -0.985202, -1.053211, -0.918686, -0.694364, -0.725840, -0.746027, -0.710133, -0.544783, -0.455700, -0.421399, -0.464005, -0.545626, -0.396604, -0.349282, -0.378450, -0.544699, -0.464855, -0.393941, -0.282854, -0.159780, -0.035743, 0.010728, -0.016493, 0.004021, -0.162633, -0.310127, -0.462988, -0.703312, -0.915930, -0.775201, -0.867989, -1.000637, -1.017746, -1.046002, -1.052462, -1.134608, -0.926987, -1.034266, -0.902811, -1.097333, -1.048404, -0.898731, -0.717632, -0.480738, -0.251514, -0.307586, -0.163434, -0.026334, -0.090318, -0.003501, -0.005213, -0.018400, -0.050643, -0.082140, -0.251256, -0.367409, -0.564182, -0.789387, -0.792976, -0.974348, -1.037754, -1.069420, -0.957143, -1.054646, -1.093082, -1.040982, -1.062348, -0.948851, -0.859933, -0.558707, -0.383967, -0.279360, -0.236788, -0.193499, -0.145128, -0.086471, -0.092344, -0.029802, -0.019321, 0.008710, 0.001470, -0.041181, -0.182470, -0.319245, -0.470842, -0.674719, -0.655675, -0.787302, -0.848051, -0.960849, -1.005055, -1.075768, -0.944753, -0.994983, -0.919283, -0.864899, -0.766261, -0.520734, -0.466919, -0.391043, -0.370923, -0.245554, -0.097824, -0.068287, -0.015451, -0.035622, -0.033044, -0.008796, 0.020405, -0.012042, -0.067557, -0.134915, -0.165903, -0.251814, -0.182245, -0.342193, -0.543330, -0.662695, -0.611040, -0.546908, -0.524973, -0.520706, -0.624392, -0.382608, -0.294614, -0.294023, -0.240605, -0.103972, -0.145861, -0.100438, -0.021911, -0.000119, -0.006786, -0.001677},
    {-0.005266, -0.004191, -0.020301, 0.028424, 0.010812, 0.017661, 0.015667, 0.022551, 0.035347, 0.014268, 0.030597, -0.004545, -0.021662, -0.088993, -0.037183, -0.056176, -0.029343, 0.008304, 0.011926, 0.026055, -0.014933, 0.034745, 0.015308, -0.033368, -0.018804, -0.015062, 0.017605, 0.009780, 0.001103, 0.017349, -0.001586, -0.012045, -0.013905, -0.002792, -0.038420, -0.081879, -0.170700, -0.231297, -0.222298, -0.376900, -0.316824, -0.289794, -0.360615, -0.370480, -0.268112, -0.229667, -0.251345, -0.150681, -0.177703, -0.191089, -0.089616, -0.085061, 0.034685, 0.018977, -0.028439, 0.012754, -0.027810, 0.012615, -0.008833, -0.082577, -0.138514, -0.047493, -0.085657, -0.194236, -0.395899, -0.520871, -0.568835, -0.696061, -0.753135, -0.869534, -0.910308, -0.861747, -0.784096, -0.778318, -0.754354, -0.776399, -0.575711, -0.399467, -0.308981, -0.204225, -0.236098, -0.162296, -0.011094, -0.022486, 0.015802, -0.031143, -0.002831, -0.132915, -0.193512, -0.177954, -0.215989, -0.365105, -0.384101, -0.506194, -0.672466, -0.746521, -0.889661, -0.947908, -0.952503, -0.993109, -0.975452, -0.974966, -0.951205, -0.978236, -0.854778, -0.774774, -0.560807, -0.410944, -0.258721, -0.103045, -0.043957, 0.009851, -0.010503, -0.057431, -0.069291, 0.052429, -0.146074, -0.317379, -0.589179, -0.559035, -0.677289, -0.779603, -0.984841, -1.149960, -1.229004, -1.220219, -1.355712, -1.390647, -1.383366, -1.470741, -1.482864, -1.385331, -1.236409, -0.837849, -0.833248, -0.780863, -0.660526, -0.431598, -0.215076, -0.078836, 0.032202, -0.012604, -0.184920, -0.070861, -0.247826, -0.096932, -0.106568, -0.146865, -0.321221, -0.393366, -0.463996, -0.579219, -0.582322, -0.684410, -0.778585, -0.805173, -0.844070, -1.046921, -0.964340, -0.996929, -1.222314, -0.977050, -0.797991, -1.031702, -0.817029, -0.411832, -0.285977, -0.141670, 0.027563, -0.062566, 0.072309, -0.073181, -0.189303, -0.018971, 0.023508, 0.018008, 0.151545, 0.100484, 0.117787, 0.082594, -0.081972, -0.218754, -0.292106, -0.299862, -0.213561, -0.241422, -0.276987, -0.293801, -0.205439, -0.136721, -0.267408, -0.448057, -0.484951, -0.820070, -0.559798, -0.239721, 0.079338, 0.078194, 0.162365, 0.015149, 0.054873, 0.166917, 0.240535, 0.339879, 0.395965, 0.411187, 0.389144, 0.358299, 0.247326, 0.049671, -0.114807, -0.116857, -0.027044, 0.020477, 0.020879, 0.058080, 0.052889, 0.036988, 0.017485, -0.193934, -0.301814, -0.598148, -0.533128, -0.258717, -0.052566, 0.180055, 0.197573, 0.213180, 0.238557, 0.288615, 0.362097, 0.435030, 0.430058, 0.317538, 0.329742, 0.361750, 0.283929, 0.176933, 0.181997, 0.176997, 0.258966, 0.228191, 0.180969, 0.122495, 0.114045, 0.070271, 0.094800, -0.078358, -0.311686, -0.518151, -0.490405, -0.232627, 0.155192, 0.206160, 0.276278, 0.332522, 0.369944, 0.423005, 0.274480, 0.255183, 0.258054, 0.159367, 0.146559, 0.211485, 0.271767, 0.285682, 0.363896, 0.416309, 0.524437, 0.450727, 0.261406, 0.157608, 0.126614, 0.114945, 0.119605, -0.087848, -0.275144, -0.174300, -0.510864, -0.129172, 0.122293, 0.112553, 0.313716, 0.435483, 0.430058, 0.413968, 0.229554, 0.158892, 0.031649, -0.048460, 0.052364, 0.120194, 0.197873, 0.449822, 0.430842, 0.554189, 0.709705, 0.512372, 0.323715, 0.212204, 0.183504, 0.212901, 0.186257, -0.129111, -0.312810, -0.130443, -0.403264, -0.063357, 0.189861, 0.248689, 0.335744, 0.401431, 0.438278, 0.330358, 0.124983, -0.014797, -0.165808, -0.117332, -0.006394, 0.084309, 0.274006, 0.236617, 0.268281, 0.386197, 0.492143, 0.380936, 0.291841, 0.097732, 0.111701, 0.189235, 0.077748, -0.239069, -0.477203, -0.364693, -0.250939, -0.054096, 0.172862, 0.260747, 0.377132, 0.436942, 0.437263, 0.217454, -0.065348, -0.158543, -0.176641, -0.261785, -0.187342, -0.155340, -0.312618, -0.516154, -0.444936, 0.027931, 0.320180, 0.267129, 0.108543, 0.001304, 0.048059, 0.093732, -0.037082, -0.221025, -0.706926, -0.236970, -0.139031, -0.005514, -0.130332, 0.212247, 0.234721, 0.273122, 0.295435, 0.099887, -0.167740, -0.308680, -0.272059, -0.370357, -0.391023, -0.634717, -1.049381, -1.142081, -0.773146, -0.197886, 0.099922, 0.086200, 0.028742, 0.150324, 0.165199, 0.135800, 0.113928, -0.048053, -0.196215, -0.098723, -0.210824, -0.166389, -0.055388, 0.153376, 0.135265, 0.198822, 0.097160, 0.024906, -0.183146, -0.302498, -0.313543, -0.399938, -0.504396, -0.802326, -1.014088, -0.913942, -0.554102, -0.088585, 0.050434, 0.152316, 0.285475, 0.395417, 0.352286, 0.321857, 0.337073, 0.189435, -0.001737, 0.125420, -0.242302, -0.096133, 0.058872, -0.020055, 0.130702, 0.161953, 0.060028, -0.159857, -0.190737, -0.269184, -0.377176, -0.427163, -0.543896, -0.627548, -0.748885, -0.622811, -0.291037, 0.037163, 0.076031, 0.254254, 0.383162, 0.447522, 0.443991, 0.421330, 0.277840, 0.101007, -0.058556, -0.094641, -0.409650, -0.095109, 0.106443, -0.089359, -0.008808, 0.081764, 0.081895, -0.079619, -0.125979, -0.169278, -0.277603, -0.390305, -0.458174, -0.546183, -0.429334, -0.247466, -0.067251, 0.071744, 0.075338, 0.183189, 0.306344, 0.364985, 0.281015, 0.174270, -0.021776, -0.077480, -0.058888, -0.458725, -0.305132, -0.106319, 0.003241, -0.033125, -0.154465, 0.003581, 0.000193, -0.020895, -0.127271, -0.259049, -0.264546, -0.304142, -0.421378, -0.366352, -0.155445, 0.092954, 0.193495, 0.138403, -0.057012, 0.099503, 0.219109, 0.176760, 0.099875, -0.062961, -0.189798, -0.278733, -0.234644, -0.261091, -0.252749, -0.180762, 0.036204, -0.002290, 0.021029, -0.023643, -0.083453, -0.253854, -0.330502, -0.437874, -0.411511, -0.344159, -0.359046, -0.103636, 0.138034, 0.302449, 0.166496, 0.062829, -0.092508, 0.024640, -0.046314, -0.135697, -0.237765, -0.410630, -0.403315, -0.660810, -0.503350, -0.351020, -0.172296, -0.240367, -0.103102, 0.093124, 0.003433, -0.056598, -0.119215, -0.526879, -0.627606, -0.901373, -0.608855, -0.412136, -0.202539, 0.058569, 0.240056, 0.235615, 0.134743, -0.028226, -0.216299, -0.154187, -0.231720, -0.385882, -0.431599, -0.497123, -0.476630, -0.749908, -0.596711, -0.363937, -0.135706, -0.135227, 0.003873, -0.125982, -0.256983, -0.317657, -0.435535, -0.997988, -0.899699, -0.734656, -0.530114, -0.239586, -0.050903, 0.076699, 0.136004, 0.037471, 0.034954, -0.128988, -0.265053, -0.334972, -0.366093, -0.547148, -0.635578, -0.530642, -0.523774, -0.511167, -0.361448, -0.289078, -0.154954, -0.098467, -0.077909, -0.166906, -0.371475, -0.472322, -0.535240, -0.615672, -0.387594, -0.374801, -0.274970, -0.175189, -0.094828, 0.028828, 0.018931, -0.009029, -0.099830, -0.160690, -0.215657, -0.312746, -0.403041, -0.491315, -0.543283, -0.397368, -0.488058, -0.668707, -0.426678, -0.080433, -0.154926, -0.076280, -0.043889, -0.173887, -0.256841, -0.400037, -0.327241, -0.030212, -0.106126, 0.008974, -0.087405, -0.142830, -0.025563, -0.042586, -0.089983, -0.112761, -0.073501, -0.087480, -0.136945, -0.185784, -0.289536, -0.329880, -0.387544, -0.402958, -0.489678, -0.549492, -0.316986, -0.146253, -0.149940, -0.061795, -0.024076, 0.028778, -0.305876, -0.255944, 0.069984, 0.191781, 0.196229, 0.152012, 0.014106, -0.076757, 0.030957, -0.090466, -0.074527, -0.068398, 0.007932, 0.038992, -0.084939, -0.104719, -0.148974, -0.279784, -0.291802, -0.340704, -0.435827, -0.506146, -0.214164, -0.126472, -0.101941, 0.030592, -0.030043, 0.032337, 0.018046, 0.115395, 0.266654, 0.351872, 0.380514, 0.340452, 0.220564, 0.128542, 0.106089, 0.076269, 0.112417, 0.176281, 0.195395, 0.145437, 0.136052, 0.084304, -0.022678, -0.154336, -0.207647, -0.202675, -0.364707, -0.539693, -0.255858, -0.184151, -0.107370, -0.024835, 0.009590, 0.033339, -0.158965, 0.160338, 0.253460, 0.308792, 0.316012, 0.411389, 0.390388, 0.259799, 0.250504, 0.245497, 0.268457, 0.291241, 0.344491, 0.323374, 0.276120, 0.245531, 0.114454, -0.012484, -0.184120, -0.151093, -0.046440, -0.236229, -0.159395, -0.072297, -0.084822, 0.035095, 0.004907, 0.028766, 0.024469, -0.121100, -0.106447, 0.113447, 0.076670, 0.102264, 0.150983, 0.187237, 0.163778, 0.103137, 0.148676, 0.317083, 0.290156, 0.417352, 0.386069, 0.421431, 0.268739, 0.034459, -0.183523, -0.046467, 0.096218, 0.040330, -0.087080, 0.063331, -0.024525, 0.032536, -0.012140, -0.008482, 0.032644, -0.031570, 0.060240, 0.161688, 0.059219, 0.041685, 0.014416, 0.142203, 0.316089, 0.344132, 0.244033, 0.344892, 0.345089, 0.342616, 0.395149, 0.317698, 0.220042, 0.182314, 0.086892, 0.145159, 0.104992, 0.110039, -0.017552, -0.003149, -0.031202, -0.014598},
    {-0.021762, -0.017324, -0.014356, -0.010841, -0.026593, -0.035189, 0.027079, 0.027839, -0.003139, 0.007864, -0.014364, -0.006285, -0.039036, -0.089642, -0.075678, -0.009695, 0.023688, 0.031485, 0.016061, 0.028476, -0.020939, 0.023047, -0.033049, -0.023979, -0.021871, -0.033757, -0.007089, -0.019931, 0.006687, -0.030510, -0.016078, 0.026398, -0.035628, -0.095689, -0.070354, -0.181222, -0.232792, -0.320263, -0.274860, -0.564083, -0.484567, -0.282994, -0.450243, -0.465251, -0.467966, -0.400696, -0.281289, -0.256549, -0.239453, -0.196089, -0.180688, -0.125288, -0.016304, -0.027247, -0.023231, 0.006066, -0.003904, 0.018535, -0.028140, -0.113899, -0.111459, -0.118825, -0.248118, -0.458445, -0.518277, -0.740720, -0.815692, -0.971045, -0.971256, -1.196926, -1.207168, -1.123643, -1.293374, -1.159408, -0.687867, -0.985718, -0.875238, -0.641508, -0.379501, -0.228633, -0.230892, -0.130025, -0.010727, -0.021282, 0.032155, 0.018236, -0.109629, -0.119418, -0.335889, -0.338607, -0.513473, -0.674397, -0.538571, -0.782153, -0.908065, -1.073230, -0.934762, -0.710045, -0.787970, -0.825236, -0.990672, -0.995339, -0.829740, -0.635577, -0.463916, -0.202050, -0.150410, -0.068892, -0.110707, -0.134989, -0.071961, -0.006651, -0.011591, -0.075455, -0.029567, -0.255213, -0.289693, -0.479441, -0.593946, -0.543771, -0.516627, -0.248727, -0.172706, -0.130293, -0.079784, -0.119831, -0.111044, -0.106088, -0.119141, -0.212240, -0.295633, -0.433368, -0.272014, -0.152610, -0.222660, -0.309348, -0.037252, 0.084783, 0.053460, 0.071011, 0.021439, 0.004076, -0.225422, -0.182342, -0.328965, -0.510171, -0.632269, -0.509777, -0.378454, -0.233295, -0.198416, -0.061305, 0.036090, 0.076475, 0.115331, 0.144185, 0.187824, 0.205236, 0.083427, -0.060130, -0.119157, -0.148908, -0.089923, -0.270098, -0.227083, -0.114495, -0.094885, -0.066168, 0.028562, -0.105337, -0.240909, -0.306160, -0.355507, -0.468690, -0.542423, -0.378681, -0.181970, -0.105108, -0.089495, 0.018104, 0.049431, 0.016192, 0.015442, 0.154491, 0.118055, -0.009055, -0.048336, -0.076295, -0.070877, 0.063389, -0.030094, -0.047525, -0.223207, -0.237988, -0.153458, -0.009956, -0.068359, -0.161169, -0.339384, -0.404544, -0.253644, -0.364877, -0.255643, -0.061057, -0.003342, -0.048771, 0.033248, -0.010091, -0.030170, -0.058291, -0.075077, -0.048693, -0.013511, -0.137251, -0.068164, -0.106621, 0.087555, 0.202087, 0.088290, 0.074844, 0.008623, -0.235447, -0.202920, -0.044501, -0.098549, -0.248588, -0.626838, -0.243399, -0.047095, -0.179945, 0.027302, 0.110383, 0.101900, 0.155789, 0.136024, 0.061778, 0.118406, 0.040738, -0.111410, -0.183124, -0.129112, -0.130848, -0.074568, 0.012477, 0.104776, 0.256099, 0.231220, 0.231171, 0.057164, -0.238513, -0.230193, -0.025759, -0.153383, -0.334799, -0.671529, -0.200487, 0.040853, 0.025648, 0.135751, 0.235830, 0.249227, 0.203720, 0.153916, 0.152998, 0.150575, -0.012980, -0.276727, -0.461952, -0.311510, -0.141990, -0.048323, 0.070256, 0.114132, 0.201930, 0.310924, 0.310325, 0.067848, -0.211646, 0.032023, 0.005070, -0.117112, -0.314575, -0.786476, -0.329313, 0.100273, 0.083562, 0.329825, 0.353951, 0.340570, 0.239557, 0.192312, 0.145152, 0.207793, 0.041740, -0.281126, -0.422767, -0.280502, -0.103284, 0.065230, 0.085095, 0.081602, 0.269117, 0.420819, 0.443483, 0.196090, 0.009717, -0.026888, 0.038831, -0.196365, -0.462460, -0.990927, -0.390001, -0.008421, 0.219858, 0.343823, 0.395976, 0.297896, 0.253727, 0.150145, 0.141755, 0.334300, 0.296948, -0.056661, -0.198016, -0.065889, 0.029865, 0.109243, 0.109909, 0.148998, 0.248571, 0.410516, 0.469678, 0.521286, 0.278316, 0.185656, 0.020065, -0.107974, -0.391835, -0.707463, -0.220180, -0.003907, 0.177264, 0.306928, 0.167059, 0.111300, -0.000262, -0.109188, 0.090817, 0.362367, 0.331706, 0.092501, 0.073119, 0.074624, 0.046267, 0.037348, 0.141669, 0.170818, 0.241927, 0.254656, 0.324109, 0.350947, 0.193635, 0.128446, -0.038004, -0.100625, -0.164791, -0.476152, -0.394961, -0.116523, -0.186186, -0.148233, -0.261711, -0.247824, -0.225078, -0.214695, 0.134598, 0.357416, 0.223186, 0.069325, 0.116774, 0.116418, 0.009383, -0.092444, -0.004262, 0.092282, 0.060842, -0.022573, -0.042161, -0.021173, 0.015376, 0.049883, -0.043324, -0.129429, -0.124258, -0.346622, -0.633333, -0.500095, -0.603425, -0.681624, -0.635260, -0.626836, -0.502818, -0.239817, 0.246359, 0.260574, 0.132860, 0.115811, 0.039448, 0.076004, -0.062681, -0.254824, -0.271117, -0.185193, -0.232851, -0.303558, -0.324062, -0.261285, -0.086533, -0.170682, -0.126826, -0.147336, -0.022660, -0.285992, -0.185063, -0.669299, -0.938928, -0.817099, -0.781935, -0.559508, -0.331838, -0.074379, 0.268355, 0.223022, 0.223456, 0.088612, 0.019233, 0.057781, -0.260150, -0.372305, -0.379643, -0.399443, -0.435838, -0.382058, -0.289976, -0.318325, -0.284069, -0.515903, -0.218295, -0.096096, -0.143720, -0.191843, -0.120639, -0.875840, -0.801885, -0.785258, -0.413282, -0.160104, 0.020495, 0.152562, 0.179784, 0.256849, 0.202357, -0.028129, 0.013521, 0.001783, -0.265523, -0.434189, -0.365283, -0.368500, -0.372409, -0.360178, -0.111240, -0.208232, -0.552022, -0.423983, -0.185435, 0.020106, -0.105704, -0.194230, -0.285161, -0.824854, -0.749179, -0.470048, -0.001615, 0.229016, 0.314946, 0.266451, 0.337965, 0.417135, 0.096887, -0.104308, -0.091165, -0.061399, -0.224834, -0.302945, -0.284515, -0.202420, -0.280040, -0.183519, -0.051475, -0.125795, -0.728701, -0.341012, -0.196390, -0.078335, -0.127944, -0.423299, -0.584989, -0.940914, -0.397491, -0.181945, 0.073183, 0.394457, 0.399542, 0.356245, 0.414877, 0.337112, -0.025526, -0.320079, -0.176247, -0.159199, -0.113967, -0.167050, -0.159522, -0.207771, -0.232074, -0.103507, -0.109406, -0.341202, -0.790620, -0.322162, -0.166551, -0.113377, -0.156039, -0.458722, -0.642574, -0.714568, -0.233057, -0.122378, 0.092044, 0.284895, 0.270240, 0.263611, 0.160177, 0.065212, -0.329627, -0.425274, -0.208473, -0.166775, -0.172976, -0.186521, -0.120717, -0.167102, -0.143138, -0.031336, -0.023740, -0.553039, -0.858337, -0.360872, -0.138818, -0.024846, -0.208109, -0.471137, -0.698105, -0.540016, -0.167221, -0.062807, 0.093253, 0.011571, -0.050351, -0.025016, -0.142612, -0.116760, -0.288417, -0.274234, -0.232970, -0.230873, -0.227408, -0.113603, -0.103030, -0.048114, -0.051909, 0.100600, -0.147075, -0.736621, -0.621083, -0.301892, -0.110069, -0.096934, -0.229221, -0.313692, -0.647809, -0.736666, -0.087588, 0.082470, 0.044248, -0.068914, -0.122288, -0.139544, -0.131180, -0.049598, 0.082274, 0.005254, -0.057232, -0.104119, -0.141405, 0.005266, 0.057865, 0.048416, 0.047899, 0.076131, -0.295524, -0.673998, -0.501816, -0.295232, -0.050860, -0.104390, -0.172713, -0.316210, -0.359672, -0.564826, -0.216135, 0.010556, -0.043583, -0.155936, -0.187517, -0.039449, 0.046736, 0.258687, 0.340228, 0.238451, 0.130114, 0.050111, 0.099812, 0.152975, 0.186258, 0.125861, 0.140619, 0.057319, -0.303972, -0.521384, -0.424745, -0.103738, -0.069632, 0.011753, -0.005611, -0.180390, -0.302426, -0.369089, -0.463494, -0.227332, -0.208104, -0.203243, -0.119001, -0.013454, 0.142112, 0.236306, 0.373369, 0.308668, 0.313050, 0.259747, 0.262652, 0.253823, 0.291930, 0.199697, 0.160919, 0.043718, -0.065621, -0.180706, -0.222087, -0.224564, -0.014073, 0.027518, -0.035529, -0.140423, -0.336122, -0.526739, -0.537699, -0.410385, -0.194067, -0.023102, -0.037947, -0.040078, -0.053818, -0.074939, -0.006869, 0.094004, 0.129841, 0.230736, 0.172530, 0.263467, 0.299744, 0.278235, 0.133086, 0.114481, 0.031921, -0.207050, -0.170009, -0.114010, 0.032164, 0.023624, 0.032319, -0.125351, -0.149025, -0.495047, -0.631017, -0.401652, -0.486928, -0.455647, -0.475817, -0.379020, -0.437031, -0.443781, -0.460546, -0.317101, -0.229132, -0.224345, -0.182329, -0.214583, -0.165891, -0.157526, -0.526437, -0.439058, -0.129408, -0.293835, -0.076439, -0.068030, 0.000854, 0.014329, -0.022476, -0.003227, -0.094078, -0.298229, -0.412367, -0.578670, -0.762294, -0.628286, -0.655830, -0.722125, -0.907050, -0.913768, -0.946834, -0.887180, -1.477828, -1.555731, -1.161582, -0.824829, -0.966386, -0.751907, -0.581446, -0.255497, -0.046894, -0.170811, -0.079566, -0.005844, 0.027280, -0.025918, -0.012226, 0.018128, -0.003029, -0.096523, -0.148697, -0.216936, -0.456328, -0.501808, -0.614358, -0.532515, -0.958315, -1.052697, -0.976478, -0.949171, -0.909207, -0.969804, -0.658270, -0.319823, -0.351745, -0.295717, -0.285393, -0.200245, -0.140608, 0.017617, 0.020928, -0.028061, -0.033578},
    {-0.013058, -0.026826, -0.000803, -0.016285, 0.023644, 0.027978, 0.013890, 0.028049, 0.013957, -0.025203, 0.031336, -0.014536, -0.032931, -0.071441, -0.075822, -0.040283, 0.030153, -0.031651, -0.019567, 0.022358, -0.028826, 0.032224, 0.032360, 0.027549, 0.033634, -0.029937, 0.024416, -0.017988, -0.020503, -0.022639, -0.006622, 0.032016, -0.032924, -0.072562, -0.091582, -0.113006, -0.148791, -0.235467, -0.135575, -0.504425, -0.441348, -0.382254, -0.435492, -0.405723, -0.372420, -0.388312, -0.377895, -0.341759, -0.187273, -0.142240, -0.138373, -0.085336, 0.010185, -0.025328, -0.023234, -0.011444, 0.011784, -0.022203, -0.038094, -0.139778, -0.130909, -0.117139, -0.138761, -0.351283, -0.346602, -0.470125, -0.473141, -0.690960, -0.792355, -0.942824, -1.042416, -1.039163, -1.118032, -0.976456, -1.185970, -1.066661, -0.659688, -0.460834, -0.284621, -0.262226, -0.220567, -0.114760, -0.024773, 0.000974, 0.022595, 0.029231, -0.033484, -0.137222, -0.273515, -0.195239, -0.330489, -0.577330, -0.355532, -0.435112, -0.761755, -0.927926, -1.008209, -0.897586, -1.101291, -1.281221, -1.332816, -1.413755, -0.884374, -1.200015, -1.037116, -0.566604, -0.561981, -0.389092, -0.309381, -0.147672, -0.089849, -0.026283, -0.023468, -0.059180, -0.139135, -0.225781, -0.256673, -0.319893, -0.590496, -0.604230, -0.638945, -0.831404, -1.017628, -1.157460, -1.344261, -1.484642, -1.619710, -1.695240, -1.691839, -1.548429, -1.198630, -1.275440, -1.074831, -0.931439, -0.817631, -0.644645, -0.393214, -0.431806, -0.251191, -0.062153, 0.032429, -0.034638, -0.217861, -0.152928, -0.373636, -0.561053, -0.852048, -0.964370, -0.978626, -1.085957, -0.807322, -0.609813, -0.498414, -0.376292, -0.304960, -0.396326, -0.693154, -0.795684, -0.725821, -0.682625, -0.628770, -0.708891, -0.892474, -1.112423, -0.845570, -0.474364, -0.283256, -0.152089, 0.007266, -0.142778, -0.310690, -0.294341, -0.590305, -0.867431, -0.871533, -0.937178, -0.756954, -0.561380, -0.400874, -0.141940, 0.111921, 0.376526, 0.536685, 0.549584, 0.483194, 0.256891, 0.065427, -0.132896, -0.143761, -0.392475, -0.658391, -1.040461, -0.901538, -0.510410, -0.506885, -0.183824, -0.035875, -0.147857, -0.296174, -0.476609, -0.776719, -0.757957, -0.667542, -0.548524, -0.441543, -0.416773, -0.184227, 0.104056, 0.299653, 0.473212, 0.626657, 0.784274, 0.710430, 0.382699, 0.104073, 0.000469, -0.102285, -0.115336, -0.375254, -0.566770, -0.837200, -0.780807, -0.540072, -0.311739, -0.124336, -0.302023, -0.400692, -0.575675, -0.464817, -0.505468, -0.424620, -0.408127, -0.271566, -0.297365, -0.158101, -0.101655, 0.007608, 0.217991, 0.438058, 0.451051, 0.320925, 0.052985, -0.123555, -0.213492, -0.144896, -0.129281, -0.235129, -0.395303, -0.495451, -0.690645, -0.553571, -0.162918, -0.150629, -0.267710, -0.520746, -0.492222, -0.518324, -0.353405, -0.203569, -0.181032, -0.155964, -0.202460, -0.138700, -0.097520, -0.000894, 0.076484, 0.098860, 0.051265, -0.105734, -0.258830, -0.215819, -0.264699, -0.199032, -0.136958, -0.193178, -0.315225, -0.320094, -0.538751, -0.522308, -0.188033, -0.175315, -0.326587, -0.603445, -0.497181, -0.337447, -0.135865, 0.016117, 0.023242, 0.038790, -0.073693, -0.001953, 0.050857, 0.092053, -0.027330, -0.124499, -0.158497, -0.187411, -0.171499, -0.084812, -0.089744, 0.013114, 0.017624, -0.000616, -0.123471, -0.284016, -0.333489, -0.505402, -0.188647, -0.114472, -0.419877, -0.507895, -0.442523, -0.093192, 0.172283, 0.187191, 0.207811, 0.262971, 0.116706, 0.132503, 0.174427, 0.070837, -0.039046, -0.139028, 0.023089, 0.080430, 0.126838, 0.102089, 0.188902, 0.248394, 0.284283, 0.221577, -0.031035, -0.453126, -0.451611, -0.382010, -0.227304, -0.174317, -0.375839, -0.483977, -0.322012, 0.195742, 0.335215, 0.318454, 0.273971, 0.304016, 0.280254, 0.241618, 0.190188, 0.079402, 0.091676, 0.198773, 0.261211, 0.262803, 0.230203, 0.238197, 0.334404, 0.404855, 0.446242, 0.269323, -0.018350, -0.632147, -0.637411, -0.423336, -0.202514, -0.100124, -0.281340, -0.413533, -0.032116, 0.338975, 0.415017, 0.355769, 0.305301, 0.262406, 0.253755, 0.262634, 0.250457, 0.166467, 0.168152, 0.323532, 0.389601, 0.352062, 0.263353, 0.308821, 0.337489, 0.353237, 0.351149, 0.157904, -0.312689, -0.822348, -0.645881, -0.387811, -0.145775, -0.094097, -0.163070, -0.316637, 0.094754, 0.386891, 0.330941, 0.276896, 0.152984, 0.142247, 0.194204, 0.235312, 0.204953, 0.150239, 0.117098, 0.109737, 0.199959, 0.278468, 0.306005, 0.150358, 0.051602, 0.045633, 0.052297, -0.200929, -0.559574, -0.927597, -0.512036, -0.228524, -0.148243, -0.116129, -0.076781, -0.320620, 0.071656, 0.210397, 0.174270, 0.031604, 0.054835, 0.063860, 0.137212, 0.184535, 0.191145, 0.052796, -0.098791, -0.095835, 0.077913, 0.246195, 0.179603, -0.068528, -0.145118, -0.202850, -0.283954, -0.430682, -0.591917, -0.832862, -0.458876, -0.071118, -0.176085, -0.057801, -0.133377, -0.220337, -0.073934, 0.084812, -0.021089, -0.087077, -0.023971, 0.091993, 0.123005, 0.244128, 0.193952, -0.011169, -0.254385, -0.203222, 0.017826, 0.122726, 0.042216, -0.103495, -0.242136, -0.260341, -0.398856, -0.322257, -0.617263, -0.846995, -0.683806, -0.318586, -0.245089, -0.015668, -0.057768, -0.282802, -0.165830, -0.092142, -0.212070, -0.191651, 0.024829, 0.186232, 0.253206, 0.235023, 0.219056, 0.025713, -0.149943, -0.129275, 0.059884, 0.044957, -0.008177, -0.114778, -0.138932, -0.190085, -0.219900, -0.395729, -0.562970, -0.943915, -0.396733, -0.365394, -0.139980, 0.064738, -0.020257, -0.337877, -0.381286, -0.187245, -0.310204, -0.162518, 0.060452, 0.116967, 0.142607, 0.122995, 0.087279, -0.041635, -0.100350, -0.008915, -0.007182, -0.013557, -0.015179, -0.115192, -0.091708, -0.099487, -0.155708, -0.267671, -0.331727, -0.766462, -0.259502, -0.456040, -0.241459, -0.061689, -0.232119, -0.359369, -0.319714, -0.497813, -0.414752, -0.385383, -0.259827, -0.227788, -0.229088, -0.251760, -0.171429, -0.152323, -0.180028, -0.091380, -0.184602, -0.085474, -0.138937, -0.185344, -0.159335, -0.083030, -0.068854, -0.103492, -0.232643, -0.310266, -0.025718, -0.272743, -0.170301, 0.015259, -0.190052, -0.291845, -0.412990, -0.465858, -0.692040, -0.867062, -0.802177, -0.674071, -0.674730, -0.520923, -0.359897, -0.319863, -0.252501, -0.216711, -0.202993, -0.134042, -0.218229, -0.250553, -0.138137, 0.010158, 0.028815, 0.027007, -0.104813, -0.087066, 0.060942, -0.347131, -0.116540, -0.099372, -0.134482, -0.192557, -0.509914, -0.430082, -0.693955, -1.025517, -0.959986, -0.735886, -0.530464, -0.444992, -0.464761, -0.335123, -0.260278, -0.345673, -0.324141, -0.251885, -0.335573, -0.283942, -0.124668, 0.066869, 0.121827, 0.157322, 0.118185, 0.087802, 0.092482, -0.267662, -0.027733, -0.050746, -0.141909, -0.185590, -0.391523, -0.486767, -0.923736, -0.817150, -0.478759, -0.188266, -0.242589, -0.261534, -0.277729, -0.288645, -0.396011, -0.328333, -0.388781, -0.397074, -0.307403, -0.207753, -0.129319, 0.136792, 0.193865, 0.280891, 0.293731, 0.031830, 0.034588, -0.159414, -0.030504, -0.003525, 0.008125, -0.268146, -0.387839, -0.460087, -0.325231, -0.215990, -0.055870, 0.009175, -0.158921, -0.174439, -0.212652, -0.279749, -0.352503, -0.356237, -0.450327, -0.304270, -0.188264, -0.014637, 0.070064, 0.293281, 0.293986, 0.435344, 0.379030, 0.238746, -0.004274, -0.139703, -0.022735, 0.008396, -0.008032, -0.162256, -0.258622, -0.223976, 0.008127, 0.112220, 0.152396, 0.085695, 0.020309, 0.011536, -0.075408, -0.118695, -0.207939, -0.248199, -0.111807, -0.042505, 0.221891, 0.303869, 0.347045, 0.496205, 0.459581, 0.454045, 0.433922, 0.202652, 0.093780, -0.081478, -0.009099, -0.016690, 0.007137, 0.081397, -0.194646, 0.103030, 0.279455, 0.232358, 0.201500, 0.081740, 0.074546, 0.104946, 0.106900, 0.186356, 0.183637, 0.250930, 0.308255, 0.350277, 0.498170, 0.652312, 0.664171, 0.686284, 0.585040, 0.478885, 0.301522, 0.161020, 0.083896, -0.115590, -0.000669, -0.026044, -0.012570, 0.017853, 0.059853, 0.181150, 0.196348, 0.065561, -0.094294, -0.089430, -0.016705, -0.035694, 0.020681, 0.059692, 0.126453, 0.229317, 0.124321, 0.152464, 0.214789, 0.340096, 0.365959, 0.413490, 0.343547, 0.178004, 0.077533, 0.013610, -0.102081, 0.021736, 0.025649, -0.033648, -0.001014, -0.013874, 0.022409, -0.118727, -0.179394, -0.094475, -0.044904, -0.122162, -0.160752, -0.060981, -0.032550, -0.070903, -0.474908, -0.130342, -0.184206, -0.551980, -0.511273, -0.036075, -0.061961, 0.111589, 0.108924, 0.019480, -0.197823, 0.018244, -0.010728, -0.003239, 0.002958},
};
# 4 "neuron_core.cpp" 2
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 1 3
# 40 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3

# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 236 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 509 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 512 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 42 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 1 3
# 36 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
# 67 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
extern "C++" {

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/type_traits.h" 1 3
# 33 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3

# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 1 3
# 11 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3


# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 1 3
# 10 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 12 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_mac.h" 1 3
# 13 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 1 3
# 44 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 14 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 282 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 1 3
# 26 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 1 3








# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 595 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_directx.h" 1 3
# 596 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_ddk.h" 1 3
# 597 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 10 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 3
}



#pragma pack(pop)
# 27 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 2 3
# 283 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 558 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
extern "C" {
# 569 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{
  __asm__ __volatile__("int {$}3":);
}




const char *__mingw_get_crt_info (void);


}
# 11 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long size_t;
# 45 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ssize_t;






typedef size_t rsize_t;
# 62 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long intptr_t;
# 75 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long uintptr_t;
# 88 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ptrdiff_t;
# 106 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long __time64_t;
# 138 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef __time64_t time_t;
# 422 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 14 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 2 3

struct _exception;

#pragma pack(push,_CRT_PACKING)
# 77 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C++" {
template <typename type1, typename type2> struct __mingw_types_compatible_p {
  static const bool result = false;
};

template <typename type1> struct __mingw_types_compatible_p<type1, type1> {
 static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<const type1, type1> {
  static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<type1, const type1> {
  static const bool result = true;
};
}
# 111 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * __imp__HUGE;
# 168 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 243 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);



  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);
# 270 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 297 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 327 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 372 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 407 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 520 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 607 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 664 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 863 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1030 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1087 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1098 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1181 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1576 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
}




#pragma pack(pop)
# 46 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3

# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 1 3
# 34 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 3




# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 10 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
# 1 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 1 3
# 37 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\limits.h" 1 3
# 38 "C:\\Xilinx3\\Vitis_HLS\\2022.2\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\limits.h" 2 3
# 11 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 25 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 49 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 59 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
 typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



 typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;




  typedef struct {
    long double x;
  } _LONGDOUBLE;



#pragma pack(4)
 typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 115 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
 extern int * __imp___mb_cur_max;




__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ___mb_cur_max_func(void);
# 142 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);



  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
# 172 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern __attribute__((dllimport)) char *_sys_errlist[1];
  extern __attribute__((dllimport)) int _sys_nerr;





  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p__fmode(void);
# 190 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
# 281 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern int * __imp___argc;



  extern char *** __imp___argv;



  extern wchar_t *** __imp___wargv;





  extern char *** __imp__environ;




  extern wchar_t *** __imp__wenviron;





  extern char ** __imp__pgmptr;




  extern wchar_t ** __imp__wpgmptr;




  extern unsigned int * __imp__osplatform;




  extern unsigned int * __imp__osver;




  extern unsigned int * __imp__winver;




  extern unsigned int * __imp__winmajor;




  extern unsigned int * __imp__winminor;





  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));



  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
# 374 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  void __attribute__((__cdecl__)) __attribute__ ((__noreturn__)) abort(void);




  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);







  __extension__ long __attribute__((__cdecl__)) _abs64(long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long __attribute__((__cdecl__)) _abs64(long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));





  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 449 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
inline __attribute__((__cdecl__))
double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  return __mingw_strtod( _Str, _EndPtr);
}

inline __attribute__((__cdecl__))
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  return __mingw_strtof( _Str, _EndPtr);
}






  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);







  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);






  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);



  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);


  inline __attribute__((__cdecl__))
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstod(_Str,_EndPtr);
  }
  inline __attribute__((__cdecl__))
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstof(_Str,_EndPtr);
  }






  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 609 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);



  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);





  __extension__ unsigned long __attribute__((__cdecl__)) _rotl64(unsigned long _Val,int _Shift);
  __extension__ unsigned long __attribute__((__cdecl__)) _rotr64(unsigned long Value,int Shift);






  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);


  __extension__ unsigned long __attribute__((__cdecl__)) _rotr64(unsigned long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 680 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 735 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 3
}


#pragma pack(pop)


# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdlib_s.h" 1 3








# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 1 3
# 30 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 31 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\stdlib.h" 2 3
# 10 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\sec_api/stdlib_s.h" 2 3
# 741 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 1 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 1 3
# 11 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 103 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 144 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 163 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 206 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\malloc.h" 3
}


#pragma pack(pop)
# 742 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 39 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 2 3







extern "C++"
{
namespace std
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 107 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\bits/std_abs.h" 3
}
}
# 48 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 2 3
# 77 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
extern "C++"
{
namespace std
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "C:/Xilinx3/Vitis_HLS/2022.2/tps/mingw/8.3.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\8.3.0\\include\\c++\\cmath" 3
}





}
# 5 "neuron_core.cpp" 2


__attribute__((sdx_kernel("snn_infer", 0))) void snn_infer(const float input[784], float output[10]) {
#line 17 "C:/Users/ghada/Documents/SNN/hls/SNN_project/solution1/csynth.tcl"
#pragma HLSDIRECTIVE TOP name=snn_infer
# 7 "neuron_core.cpp"

#pragma HLS INTERFACE mode=ap_memory port=input
#pragma HLS INTERFACE mode=ap_memory port=output
#pragma HLS INTERFACE mode=ap_ctrl_hs port=return

#pragma HLS ARRAY_PARTITION variable=model_weights complete dim=1


 VITIS_LOOP_15_1: for (int i = 0; i < 10; i++) {
#pragma HLS UNROLL
 float sum = 0.0f;


        VITIS_LOOP_20_2: for (int j = 0; j < 784; j++) {
#pragma HLS PIPELINE II=1
 sum += model_weights[i][j] * input[j];
        }


        output[i] = (sum > 0) ? sum : 0.0f;
    }
}
